nohup: 忽略输入
2021-06-30 17:07:25.110970: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcuda.so.1
2021-06-30 17:07:25.123484: E tensorflow/stream_executor/cuda/cuda_driver.cc:313] failed call to cuInit: CUDA_ERROR_NO_DEVICE: no CUDA-capable device is detected
2021-06-30 17:07:25.123530: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:169] retrieving CUDA diagnostic information for host: dell-PowerEdge-R940xa
2021-06-30 17:07:25.123537: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:176] hostname: dell-PowerEdge-R940xa
2021-06-30 17:07:25.123661: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:200] libcuda reported version is: 440.44.0
2021-06-30 17:07:25.123682: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:204] kernel reported version is: 440.44.0
2021-06-30 17:07:25.123687: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:310] kernel version seems to match DSO: 440.44.0
2021-06-30 17:07:25.124056: I tensorflow/core/platform/cpu_feature_guard.cc:143] Your CPU supports instructions that this TensorFlow binary was not compiled to use: SSE4.1 SSE4.2 AVX AVX2 AVX512F FMA
2021-06-30 17:07:25.166263: I tensorflow/core/platform/profile_utils/cpu_utils.cc:102] CPU Frequency: 2600000000 Hz
2021-06-30 17:07:25.178828: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0x55ee6660f2d0 initialized for platform Host (this does not guarantee that XLA will be used). Devices:
2021-06-30 17:07:25.178902: I tensorflow/compiler/xla/service/service.cc:176]   StreamExecutor device (0): Host, Default Version
Namespace(batch_size=1024, dataset='cifar10', each_div=1000, idc_layer='all', idc_n=6, iterations=30, k_kmnc=10, k_nc=0.75, k_tknc=1, model='MobileNet', num_div=1, ood_dataset='SUN', path='/media/data1/DeepSuite/', pool_iter=1000, pool_type='test', sa_layer=-1, sa_n=1000, save_path='/media/data1/DeepSuite', wrong_rate=0.1)
load MobileNet...
/media/data1/DeepSuite/trained_models/cifar10/MobileNet.h5
Model: "model"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
input_2 (InputLayer)         [(None, None, None, 3)]   0         
_________________________________________________________________
conv1_pad (ZeroPadding2D)    (None, None, None, 3)     0         
_________________________________________________________________
conv1 (Conv2D)               (None, None, None, 32)    864       
_________________________________________________________________
conv1_bn (BatchNormalization (None, None, None, 32)    128       
_________________________________________________________________
conv1_relu (ReLU)            (None, None, None, 32)    0         
_________________________________________________________________
conv_dw_1 (DepthwiseConv2D)  (None, None, None, 32)    288       
_________________________________________________________________
conv_dw_1_bn (BatchNormaliza (None, None, None, 32)    128       
_________________________________________________________________
conv_dw_1_relu (ReLU)        (None, None, None, 32)    0         
_________________________________________________________________
conv_pw_1 (Conv2D)           (None, None, None, 64)    2048      
_________________________________________________________________
conv_pw_1_bn (BatchNormaliza (None, None, None, 64)    256       
_________________________________________________________________
conv_pw_1_relu (ReLU)        (None, None, None, 64)    0         
_________________________________________________________________
conv_pad_2 (ZeroPadding2D)   (None, None, None, 64)    0         
_________________________________________________________________
conv_dw_2 (DepthwiseConv2D)  (None, None, None, 64)    576       
_________________________________________________________________
conv_dw_2_bn (BatchNormaliza (None, None, None, 64)    256       
_________________________________________________________________
conv_dw_2_relu (ReLU)        (None, None, None, 64)    0         
_________________________________________________________________
conv_pw_2 (Conv2D)           (None, None, None, 128)   8192      
_________________________________________________________________
conv_pw_2_bn (BatchNormaliza (None, None, None, 128)   512       
_________________________________________________________________
conv_pw_2_relu (ReLU)        (None, None, None, 128)   0         
_________________________________________________________________
conv_dw_3 (DepthwiseConv2D)  (None, None, None, 128)   1152      
_________________________________________________________________
conv_dw_3_bn (BatchNormaliza (None, None, None, 128)   512       
_________________________________________________________________
conv_dw_3_relu (ReLU)        (None, None, None, 128)   0         
_________________________________________________________________
conv_pw_3 (Conv2D)           (None, None, None, 128)   16384     
_________________________________________________________________
conv_pw_3_bn (BatchNormaliza (None, None, None, 128)   512       
_________________________________________________________________
conv_pw_3_relu (ReLU)        (None, None, None, 128)   0         
_________________________________________________________________
conv_pad_4 (ZeroPadding2D)   (None, None, None, 128)   0         
_________________________________________________________________
conv_dw_4 (DepthwiseConv2D)  (None, None, None, 128)   1152      
_________________________________________________________________
conv_dw_4_bn (BatchNormaliza (None, None, None, 128)   512       
_________________________________________________________________
conv_dw_4_relu (ReLU)        (None, None, None, 128)   0         
_________________________________________________________________
conv_pw_4 (Conv2D)           (None, None, None, 256)   32768     
_________________________________________________________________
conv_pw_4_bn (BatchNormaliza (None, None, None, 256)   1024      
_________________________________________________________________
conv_pw_4_relu (ReLU)        (None, None, None, 256)   0         
_________________________________________________________________
conv_dw_5 (DepthwiseConv2D)  (None, None, None, 256)   2304      
_________________________________________________________________
conv_dw_5_bn (BatchNormaliza (None, None, None, 256)   1024      
_________________________________________________________________
conv_dw_5_relu (ReLU)        (None, None, None, 256)   0         
_________________________________________________________________
conv_pw_5 (Conv2D)           (None, None, None, 256)   65536     
_________________________________________________________________
conv_pw_5_bn (BatchNormaliza (None, None, None, 256)   1024      
_________________________________________________________________
conv_pw_5_relu (ReLU)        (None, None, None, 256)   0         
_________________________________________________________________
conv_pad_6 (ZeroPadding2D)   (None, None, None, 256)   0         
_________________________________________________________________
conv_dw_6 (DepthwiseConv2D)  (None, None, None, 256)   2304      
_________________________________________________________________
conv_dw_6_bn (BatchNormaliza (None, None, None, 256)   1024      
_________________________________________________________________
conv_dw_6_relu (ReLU)        (None, None, None, 256)   0         
_________________________________________________________________
conv_pw_6 (Conv2D)           (None, None, None, 512)   131072    
_________________________________________________________________
conv_pw_6_bn (BatchNormaliza (None, None, None, 512)   2048      
_________________________________________________________________
conv_pw_6_relu (ReLU)        (None, None, None, 512)   0         
_________________________________________________________________
conv_dw_7 (DepthwiseConv2D)  (None, None, None, 512)   4608      
_________________________________________________________________
conv_dw_7_bn (BatchNormaliza (None, None, None, 512)   2048      
_________________________________________________________________
conv_dw_7_relu (ReLU)        (None, None, None, 512)   0         
_________________________________________________________________
conv_pw_7 (Conv2D)           (None, None, None, 512)   262144    
_________________________________________________________________
conv_pw_7_bn (BatchNormaliza (None, None, None, 512)   2048      
_________________________________________________________________
conv_pw_7_relu (ReLU)        (None, None, None, 512)   0         
_________________________________________________________________
conv_dw_8 (DepthwiseConv2D)  (None, None, None, 512)   4608      
_________________________________________________________________
conv_dw_8_bn (BatchNormaliza (None, None, None, 512)   2048      
_________________________________________________________________
conv_dw_8_relu (ReLU)        (None, None, None, 512)   0         
_________________________________________________________________
conv_pw_8 (Conv2D)           (None, None, None, 512)   262144    
_________________________________________________________________
conv_pw_8_bn (BatchNormaliza (None, None, None, 512)   2048      
_________________________________________________________________
conv_pw_8_relu (ReLU)        (None, None, None, 512)   0         
_________________________________________________________________
conv_dw_9 (DepthwiseConv2D)  (None, None, None, 512)   4608      
_________________________________________________________________
conv_dw_9_bn (BatchNormaliza (None, None, None, 512)   2048      
_________________________________________________________________
conv_dw_9_relu (ReLU)        (None, None, None, 512)   0         
_________________________________________________________________
conv_pw_9 (Conv2D)           (None, None, None, 512)   262144    
_________________________________________________________________
conv_pw_9_bn (BatchNormaliza (None, None, None, 512)   2048      
_________________________________________________________________
conv_pw_9_relu (ReLU)        (None, None, None, 512)   0         
_________________________________________________________________
conv_dw_10 (DepthwiseConv2D) (None, None, None, 512)   4608      
_________________________________________________________________
conv_dw_10_bn (BatchNormaliz (None, None, None, 512)   2048      
_________________________________________________________________
conv_dw_10_relu (ReLU)       (None, None, None, 512)   0         
_________________________________________________________________
conv_pw_10 (Conv2D)          (None, None, None, 512)   262144    
_________________________________________________________________
conv_pw_10_bn (BatchNormaliz (None, None, None, 512)   2048      
_________________________________________________________________
conv_pw_10_relu (ReLU)       (None, None, None, 512)   0         
_________________________________________________________________
conv_dw_11 (DepthwiseConv2D) (None, None, None, 512)   4608      
_________________________________________________________________
conv_dw_11_bn (BatchNormaliz (None, None, None, 512)   2048      
_________________________________________________________________
conv_dw_11_relu (ReLU)       (None, None, None, 512)   0         
_________________________________________________________________
conv_pw_11 (Conv2D)          (None, None, None, 512)   262144    
_________________________________________________________________
conv_pw_11_bn (BatchNormaliz (None, None, None, 512)   2048      
_________________________________________________________________
conv_pw_11_relu (ReLU)       (None, None, None, 512)   0         
_________________________________________________________________
conv_pad_12 (ZeroPadding2D)  (None, None, None, 512)   0         
_________________________________________________________________
conv_dw_12 (DepthwiseConv2D) (None, None, None, 512)   4608      
_________________________________________________________________
conv_dw_12_bn (BatchNormaliz (None, None, None, 512)   2048      
_________________________________________________________________
conv_dw_12_relu (ReLU)       (None, None, None, 512)   0         
_________________________________________________________________
conv_pw_12 (Conv2D)          (None, None, None, 1024)  524288    
_________________________________________________________________
conv_pw_12_bn (BatchNormaliz (None, None, None, 1024)  4096      
_________________________________________________________________
conv_pw_12_relu (ReLU)       (None, None, None, 1024)  0         
_________________________________________________________________
conv_dw_13 (DepthwiseConv2D) (None, None, None, 1024)  9216      
_________________________________________________________________
conv_dw_13_bn (BatchNormaliz (None, None, None, 1024)  4096      
_________________________________________________________________
conv_dw_13_relu (ReLU)       (None, None, None, 1024)  0         
_________________________________________________________________
conv_pw_13 (Conv2D)          (None, None, None, 1024)  1048576   
_________________________________________________________________
conv_pw_13_bn (BatchNormaliz (None, None, None, 1024)  4096      
_________________________________________________________________
conv_pw_13_relu (ReLU)       (None, None, None, 1024)  0         
_________________________________________________________________
global_average_pooling2d (Gl (None, 1024)              0         
_________________________________________________________________
dense (Dense)                (None, 64)                65600     
_________________________________________________________________
dense_1 (Dense)              (None, 10)                650       
=================================================================
Total params: 3,295,114
Trainable params: 3,273,226
Non-trainable params: 21,888
_________________________________________________________________
None
<class 'numpy.ndarray'>
10000
key:  3  D[d]:  1000
key:  8  D[d]:  1000
key:  0  D[d]:  1000
key:  6  D[d]:  1000
key:  1  D[d]:  1000
key:  9  D[d]:  1000
key:  5  D[d]:  1000
key:  7  D[d]:  1000
key:  4  D[d]:  1000
key:  2  D[d]:  1000
div_idx:  [3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
<class 'numpy.ndarray'>
10000
key:  3  D[d]:  1000
key:  8  D[d]:  1000
key:  0  D[d]:  1000
key:  6  D[d]:  1000
key:  1  D[d]:  1000
key:  9  D[d]:  1000
key:  5  D[d]:  1000
key:  7  D[d]:  1000
key:  4  D[d]:  1000
key:  2  D[d]:  1000
div_idx:  [6]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [4]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [0]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [7]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [7]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [5]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [0]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [1]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [2]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [9]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [4]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [0]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [5]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [5]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [7]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [1]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [8]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [1]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [7]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [2]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [3]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [8]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [8]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [7]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [5]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [3]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [0]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [4]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [5]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [7]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
<class 'numpy.ndarray'>
10000
key:  3  D[d]:  1000
key:  8  D[d]:  1000
key:  0  D[d]:  1000
key:  6  D[d]:  1000
key:  1  D[d]:  1000
key:  9  D[d]:  1000
key:  5  D[d]:  1000
key:  7  D[d]:  1000
key:  4  D[d]:  1000
key:  2  D[d]:  1000
div_idx:  [7]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [6]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [5]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [7]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [2]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [6]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [9]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [9]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [9]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [4]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [5]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [6]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [2]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [6]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [8]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [0]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [8]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [6]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [5]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [9]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [0]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [4]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [9]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [5]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [7]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [2]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [7]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [0]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [0]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [5]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
<class 'numpy.ndarray'>
10000
key:  3  D[d]:  1000
key:  8  D[d]:  1000
key:  0  D[d]:  1000
key:  6  D[d]:  1000
key:  1  D[d]:  1000
key:  9  D[d]:  1000
key:  5  D[d]:  1000
key:  7  D[d]:  1000
key:  4  D[d]:  1000
key:  2  D[d]:  1000
div_idx:  [0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
<class 'numpy.ndarray'>/home/zhiyu/DeepSuite/adversarial/adv_function/trace.py:107: RuntimeWarning: invalid value encountered in true_divide
  neuron_value = (neuron_value - traces_low[i]) / unit[i]

10000
key:  3  D[d]:  1000
key:  8  D[d]:  1000
key:  0  D[d]:  1000
key:  6  D[d]:  1000
key:  1  D[d]:  1000
key:  9  D[d]:  1000
key:  5  D[d]:  1000
key:  7  D[d]:  1000
key:  4  D[d]:  1000
key:  2  D[d]:  1000
div_idx:  [6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
2021-06-30 17:11:46.277385: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcuda.so.1
2021-06-30 17:11:46.288664: E tensorflow/stream_executor/cuda/cuda_driver.cc:313] failed call to cuInit: CUDA_ERROR_NO_DEVICE: no CUDA-capable device is detected
2021-06-30 17:11:46.288717: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:169] retrieving CUDA diagnostic information for host: dell-PowerEdge-R940xa
2021-06-30 17:11:46.288724: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:176] hostname: dell-PowerEdge-R940xa
2021-06-30 17:11:46.288876: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:200] libcuda reported version is: 440.44.0
2021-06-30 17:11:46.288896: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:204] kernel reported version is: 440.44.0
2021-06-30 17:11:46.288902: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:310] kernel version seems to match DSO: 440.44.0
2021-06-30 17:11:46.289302: I tensorflow/core/platform/cpu_feature_guard.cc:143] Your CPU supports instructions that this TensorFlow binary was not compiled to use: SSE4.1 SSE4.2 AVX AVX2 AVX512F FMA
2021-06-30 17:11:46.334127: I tensorflow/core/platform/profile_utils/cpu_utils.cc:102] CPU Frequency: 2600000000 Hz
2021-06-30 17:11:46.342734: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0x55b5091967d0 initialized for platform Host (this does not guarantee that XLA will be used). Devices:
2021-06-30 17:11:46.342828: I tensorflow/compiler/xla/service/service.cc:176]   StreamExecutor device (0): Host, Default Version
Namespace(batch_size=1024, dataset='cifar10', each_div=500, idc_layer='all', idc_n=6, iterations=30, k_kmnc=10, k_nc=0.75, k_tknc=1, model='MobileNet', num_div=2, ood_dataset='SUN', path='/media/data1/DeepSuite/', pool_iter=1000, pool_type='test', sa_layer=-1, sa_n=1000, save_path='/media/data1/DeepSuite', wrong_rate=0.1)
load MobileNet...
/media/data1/DeepSuite/trained_models/cifar10/MobileNet.h5
Model: "model"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
input_2 (InputLayer)         [(None, None, None, 3)]   0         
_________________________________________________________________
conv1_pad (ZeroPadding2D)    (None, None, None, 3)     0         
_________________________________________________________________
conv1 (Conv2D)               (None, None, None, 32)    864       
_________________________________________________________________
conv1_bn (BatchNormalization (None, None, None, 32)    128       
_________________________________________________________________
conv1_relu (ReLU)            (None, None, None, 32)    0         
_________________________________________________________________
conv_dw_1 (DepthwiseConv2D)  (None, None, None, 32)    288       
_________________________________________________________________
conv_dw_1_bn (BatchNormaliza (None, None, None, 32)    128       
_________________________________________________________________
conv_dw_1_relu (ReLU)        (None, None, None, 32)    0         
_________________________________________________________________
conv_pw_1 (Conv2D)           (None, None, None, 64)    2048      
_________________________________________________________________
conv_pw_1_bn (BatchNormaliza (None, None, None, 64)    256       
_________________________________________________________________
conv_pw_1_relu (ReLU)        (None, None, None, 64)    0         
_________________________________________________________________
conv_pad_2 (ZeroPadding2D)   (None, None, None, 64)    0         
_________________________________________________________________
conv_dw_2 (DepthwiseConv2D)  (None, None, None, 64)    576       
_________________________________________________________________
conv_dw_2_bn (BatchNormaliza (None, None, None, 64)    256       
_________________________________________________________________
conv_dw_2_relu (ReLU)        (None, None, None, 64)    0         
_________________________________________________________________
conv_pw_2 (Conv2D)           (None, None, None, 128)   8192      
_________________________________________________________________
conv_pw_2_bn (BatchNormaliza (None, None, None, 128)   512       
_________________________________________________________________
conv_pw_2_relu (ReLU)        (None, None, None, 128)   0         
_________________________________________________________________
conv_dw_3 (DepthwiseConv2D)  (None, None, None, 128)   1152      
_________________________________________________________________
conv_dw_3_bn (BatchNormaliza (None, None, None, 128)   512       
_________________________________________________________________
conv_dw_3_relu (ReLU)        (None, None, None, 128)   0         
_________________________________________________________________
conv_pw_3 (Conv2D)           (None, None, None, 128)   16384     
_________________________________________________________________
conv_pw_3_bn (BatchNormaliza (None, None, None, 128)   512       
_________________________________________________________________
conv_pw_3_relu (ReLU)        (None, None, None, 128)   0         
_________________________________________________________________
conv_pad_4 (ZeroPadding2D)   (None, None, None, 128)   0         
_________________________________________________________________
conv_dw_4 (DepthwiseConv2D)  (None, None, None, 128)   1152      
_________________________________________________________________
conv_dw_4_bn (BatchNormaliza (None, None, None, 128)   512       
_________________________________________________________________
conv_dw_4_relu (ReLU)        (None, None, None, 128)   0         
_________________________________________________________________
conv_pw_4 (Conv2D)           (None, None, None, 256)   32768     
_________________________________________________________________
conv_pw_4_bn (BatchNormaliza (None, None, None, 256)   1024      
_________________________________________________________________
conv_pw_4_relu (ReLU)        (None, None, None, 256)   0         
_________________________________________________________________
conv_dw_5 (DepthwiseConv2D)  (None, None, None, 256)   2304      
_________________________________________________________________
conv_dw_5_bn (BatchNormaliza (None, None, None, 256)   1024      
_________________________________________________________________
conv_dw_5_relu (ReLU)        (None, None, None, 256)   0         
_________________________________________________________________
conv_pw_5 (Conv2D)           (None, None, None, 256)   65536     
_________________________________________________________________
conv_pw_5_bn (BatchNormaliza (None, None, None, 256)   1024      
_________________________________________________________________
conv_pw_5_relu (ReLU)        (None, None, None, 256)   0         
_________________________________________________________________
conv_pad_6 (ZeroPadding2D)   (None, None, None, 256)   0         
_________________________________________________________________
conv_dw_6 (DepthwiseConv2D)  (None, None, None, 256)   2304      
_________________________________________________________________
conv_dw_6_bn (BatchNormaliza (None, None, None, 256)   1024      
_________________________________________________________________
conv_dw_6_relu (ReLU)        (None, None, None, 256)   0         
_________________________________________________________________
conv_pw_6 (Conv2D)           (None, None, None, 512)   131072    
_________________________________________________________________
conv_pw_6_bn (BatchNormaliza (None, None, None, 512)   2048      
_________________________________________________________________
conv_pw_6_relu (ReLU)        (None, None, None, 512)   0         
_________________________________________________________________
conv_dw_7 (DepthwiseConv2D)  (None, None, None, 512)   4608      
_________________________________________________________________
conv_dw_7_bn (BatchNormaliza (None, None, None, 512)   2048      
_________________________________________________________________
conv_dw_7_relu (ReLU)        (None, None, None, 512)   0         
_________________________________________________________________
conv_pw_7 (Conv2D)           (None, None, None, 512)   262144    
_________________________________________________________________
conv_pw_7_bn (BatchNormaliza (None, None, None, 512)   2048      
_________________________________________________________________
conv_pw_7_relu (ReLU)        (None, None, None, 512)   0         
_________________________________________________________________
conv_dw_8 (DepthwiseConv2D)  (None, None, None, 512)   4608      
_________________________________________________________________
conv_dw_8_bn (BatchNormaliza (None, None, None, 512)   2048      
_________________________________________________________________
conv_dw_8_relu (ReLU)        (None, None, None, 512)   0         
_________________________________________________________________
conv_pw_8 (Conv2D)           (None, None, None, 512)   262144    
_________________________________________________________________
conv_pw_8_bn (BatchNormaliza (None, None, None, 512)   2048      
_________________________________________________________________
conv_pw_8_relu (ReLU)        (None, None, None, 512)   0         
_________________________________________________________________
conv_dw_9 (DepthwiseConv2D)  (None, None, None, 512)   4608      
_________________________________________________________________
conv_dw_9_bn (BatchNormaliza (None, None, None, 512)   2048      
_________________________________________________________________
conv_dw_9_relu (ReLU)        (None, None, None, 512)   0         
_________________________________________________________________
conv_pw_9 (Conv2D)           (None, None, None, 512)   262144    
_________________________________________________________________
conv_pw_9_bn (BatchNormaliza (None, None, None, 512)   2048      
_________________________________________________________________
conv_pw_9_relu (ReLU)        (None, None, None, 512)   0         
_________________________________________________________________
conv_dw_10 (DepthwiseConv2D) (None, None, None, 512)   4608      
_________________________________________________________________
conv_dw_10_bn (BatchNormaliz (None, None, None, 512)   2048      
_________________________________________________________________
conv_dw_10_relu (ReLU)       (None, None, None, 512)   0         
_________________________________________________________________
conv_pw_10 (Conv2D)          (None, None, None, 512)   262144    
_________________________________________________________________
conv_pw_10_bn (BatchNormaliz (None, None, None, 512)   2048      
_________________________________________________________________
conv_pw_10_relu (ReLU)       (None, None, None, 512)   0         
_________________________________________________________________
conv_dw_11 (DepthwiseConv2D) (None, None, None, 512)   4608      
_________________________________________________________________
conv_dw_11_bn (BatchNormaliz (None, None, None, 512)   2048      
_________________________________________________________________
conv_dw_11_relu (ReLU)       (None, None, None, 512)   0         
_________________________________________________________________
conv_pw_11 (Conv2D)          (None, None, None, 512)   262144    
_________________________________________________________________
conv_pw_11_bn (BatchNormaliz (None, None, None, 512)   2048      
_________________________________________________________________
conv_pw_11_relu (ReLU)       (None, None, None, 512)   0         
_________________________________________________________________
conv_pad_12 (ZeroPadding2D)  (None, None, None, 512)   0         
_________________________________________________________________
conv_dw_12 (DepthwiseConv2D) (None, None, None, 512)   4608      
_________________________________________________________________
conv_dw_12_bn (BatchNormaliz (None, None, None, 512)   2048      
_________________________________________________________________
conv_dw_12_relu (ReLU)       (None, None, None, 512)   0         
_________________________________________________________________
conv_pw_12 (Conv2D)          (None, None, None, 1024)  524288    
_________________________________________________________________
conv_pw_12_bn (BatchNormaliz (None, None, None, 1024)  4096      
_________________________________________________________________
conv_pw_12_relu (ReLU)       (None, None, None, 1024)  0         
_________________________________________________________________
conv_dw_13 (DepthwiseConv2D) (None, None, None, 1024)  9216      
_________________________________________________________________
conv_dw_13_bn (BatchNormaliz (None, None, None, 1024)  4096      
_________________________________________________________________
conv_dw_13_relu (ReLU)       (None, None, None, 1024)  0         
_________________________________________________________________
conv_pw_13 (Conv2D)          (None, None, None, 1024)  1048576   
_________________________________________________________________
conv_pw_13_bn (BatchNormaliz (None, None, None, 1024)  4096      
_________________________________________________________________
conv_pw_13_relu (ReLU)       (None, None, None, 1024)  0         
_________________________________________________________________
global_average_pooling2d (Gl (None, 1024)              0         
_________________________________________________________________
dense (Dense)                (None, 64)                65600     
_________________________________________________________________
dense_1 (Dense)              (None, 10)                650       
=================================================================
Total params: 3,295,114
Trainable params: 3,273,226
Non-trainable params: 21,888
_________________________________________________________________
None
<class 'numpy.ndarray'>
10000
key:  3  D[d]:  1000
key:  8  D[d]:  1000
key:  0  D[d]:  1000
key:  6  D[d]:  1000
key:  1  D[d]:  1000
key:  9  D[d]:  1000
key:  5  D[d]:  1000
key:  7  D[d]:  1000
key:  4  D[d]:  1000
key:  2  D[d]:  1000
div_idx:  [3, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [6, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [4, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [6, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [0, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [8, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [7, 0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [9, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [7, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [3, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [6, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [2, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [7, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [8, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [9, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [9, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [7, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [0, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [1, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [0, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [7, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [8, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [6, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [6, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [3, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [8, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [7, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [8, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [4, 7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [0, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
<class 'numpy.ndarray'>
10000
key:  3  D[d]:  1000
key:  8  D[d]:  1000
key:  0  D[d]:  1000
key:  6  D[d]:  1000
key:  1  D[d]:  1000
key:  9  D[d]:  1000
key:  5  D[d]:  1000
key:  7  D[d]:  1000
key:  4  D[d]:  1000
key:  2  D[d]:  1000
div_idx:  [7, 8]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [0, 7]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [1, 0]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [6, 1]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [0, 1]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [7, 1]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [6, 3]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [8, 2]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [1, 0]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [4, 7]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [2, 5]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [5, 1]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [1, 2]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [7, 3]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [8, 5]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [2, 9]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [9, 4]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [2, 7]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [9, 2]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [6, 1]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [2, 0]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [9, 2]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [8, 3]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [1, 7]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [1, 2]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [4, 9]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [6, 2]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [2, 5]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [1, 6]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [5, 0]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
<class 'numpy.ndarray'>
10000
key:  3  D[d]:  1000
key:  8  D[d]:  1000
key:  0  D[d]:  1000
key:  6  D[d]:  1000
key:  1  D[d]:  1000
key:  9  D[d]:  1000
key:  5  D[d]:  1000
key:  7  D[d]:  1000
key:  4  D[d]:  1000
key:  2  D[d]:  1000
div_idx:  [9, 1]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [3, 8]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [9, 6]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [4, 2]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [8, 4]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [9, 2]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [3, 5]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [1, 3]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [7, 4]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [4, 3]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [2, 4]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [9, 2]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [9, 5]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [6, 1]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [4, 8]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [2, 7]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [5, 0]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [8, 0]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [2, 4]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [3, 7]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [0, 5]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [7, 2]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [2, 1]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [2, 3]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [8, 4]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [4, 5]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [6, 7]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [9, 5]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [2, 0]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [7, 8]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
<class 'numpy.ndarray'>
10000
key:  3  D[d]:  1000
key:  8  D[d]:  1000
key:  0  D[d]:  1000
key:  6  D[d]:  1000
key:  1  D[d]:  1000
key:  9  D[d]:  1000
key:  5  D[d]:  1000
key:  7  D[d]:  1000
key:  4  D[d]:  1000
key:  2  D[d]:  1000
div_idx:  [4, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [2, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [6, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [2, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [1, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [6, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [4, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [2, 6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [3, 7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [1, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [0, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [2, 6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [1, 6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [4, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [8, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [5, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [1, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [3, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [8, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [9, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [5, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [9, 0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [7, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [7, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [0, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [8, 7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [3, 1]
test_fitness.shape: /home/zhiyu/DeepSuite/adversarial/adv_function/trace.py:107: RuntimeWarning: invalid value encountered in true_divide
  neuron_value = (neuron_value - traces_low[i]) / unit[i]
 (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [7, 6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [3, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [5, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
<class 'numpy.ndarray'>
10000
key:  3  D[d]:  1000
key:  8  D[d]:  1000
key:  0  D[d]:  1000
key:  6  D[d]:  1000
key:  1  D[d]:  1000
key:  9  D[d]:  1000
key:  5  D[d]:  1000
key:  7  D[d]:  1000
key:  4  D[d]:  1000
key:  2  D[d]:  1000
div_idx:  [1, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [8, 6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [4, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [7, 6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [0, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [8, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [5, 6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [5, 0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [0, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [4, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [7, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [7, 6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [2, 6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [7, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [1, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [0, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [6, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [9, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [0, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [5, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [3, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [7, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [1, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [9, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [4, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [4, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [1, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [0, 7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [2, 0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [3, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
2021-06-30 17:15:54.840782: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcuda.so.1
2021-06-30 17:15:54.852708: E tensorflow/stream_executor/cuda/cuda_driver.cc:313] failed call to cuInit: CUDA_ERROR_NO_DEVICE: no CUDA-capable device is detected
2021-06-30 17:15:54.852762: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:169] retrieving CUDA diagnostic information for host: dell-PowerEdge-R940xa
2021-06-30 17:15:54.852769: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:176] hostname: dell-PowerEdge-R940xa
2021-06-30 17:15:54.852993: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:200] libcuda reported version is: 440.44.0
2021-06-30 17:15:54.853014: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:204] kernel reported version is: 440.44.0
2021-06-30 17:15:54.853019: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:310] kernel version seems to match DSO: 440.44.0
2021-06-30 17:15:54.853223: I tensorflow/core/platform/cpu_feature_guard.cc:143] Your CPU supports instructions that this TensorFlow binary was not compiled to use: SSE4.1 SSE4.2 AVX AVX2 AVX512F FMA
2021-06-30 17:15:54.898296: I tensorflow/core/platform/profile_utils/cpu_utils.cc:102] CPU Frequency: 2600000000 Hz
2021-06-30 17:15:54.906847: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0x55f99e9aafd0 initialized for platform Host (this does not guarantee that XLA will be used). Devices:
2021-06-30 17:15:54.906905: I tensorflow/compiler/xla/service/service.cc:176]   StreamExecutor device (0): Host, Default Version
Namespace(batch_size=1024, dataset='cifar10', each_div=333, idc_layer='all', idc_n=6, iterations=30, k_kmnc=10, k_nc=0.75, k_tknc=1, model='MobileNet', num_div=3, ood_dataset='SUN', path='/media/data1/DeepSuite/', pool_iter=1000, pool_type='test', sa_layer=-1, sa_n=1000, save_path='/media/data1/DeepSuite', wrong_rate=0.1)
load MobileNet...
/media/data1/DeepSuite/trained_models/cifar10/MobileNet.h5
Model: "model"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
input_2 (InputLayer)         [(None, None, None, 3)]   0         
_________________________________________________________________
conv1_pad (ZeroPadding2D)    (None, None, None, 3)     0         
_________________________________________________________________
conv1 (Conv2D)               (None, None, None, 32)    864       
_________________________________________________________________
conv1_bn (BatchNormalization (None, None, None, 32)    128       
_________________________________________________________________
conv1_relu (ReLU)            (None, None, None, 32)    0         
_________________________________________________________________
conv_dw_1 (DepthwiseConv2D)  (None, None, None, 32)    288       
_________________________________________________________________
conv_dw_1_bn (BatchNormaliza (None, None, None, 32)    128       
_________________________________________________________________
conv_dw_1_relu (ReLU)        (None, None, None, 32)    0         
_________________________________________________________________
conv_pw_1 (Conv2D)           (None, None, None, 64)    2048      
_________________________________________________________________
conv_pw_1_bn (BatchNormaliza (None, None, None, 64)    256       
_________________________________________________________________
conv_pw_1_relu (ReLU)        (None, None, None, 64)    0         
_________________________________________________________________
conv_pad_2 (ZeroPadding2D)   (None, None, None, 64)    0         
_________________________________________________________________
conv_dw_2 (DepthwiseConv2D)  (None, None, None, 64)    576       
_________________________________________________________________
conv_dw_2_bn (BatchNormaliza (None, None, None, 64)    256       
_________________________________________________________________
conv_dw_2_relu (ReLU)        (None, None, None, 64)    0         
_________________________________________________________________
conv_pw_2 (Conv2D)           (None, None, None, 128)   8192      
_________________________________________________________________
conv_pw_2_bn (BatchNormaliza (None, None, None, 128)   512       
_________________________________________________________________
conv_pw_2_relu (ReLU)        (None, None, None, 128)   0         
_________________________________________________________________
conv_dw_3 (DepthwiseConv2D)  (None, None, None, 128)   1152      
_________________________________________________________________
conv_dw_3_bn (BatchNormaliza (None, None, None, 128)   512       
_________________________________________________________________
conv_dw_3_relu (ReLU)        (None, None, None, 128)   0         
_________________________________________________________________
conv_pw_3 (Conv2D)           (None, None, None, 128)   16384     
_________________________________________________________________
conv_pw_3_bn (BatchNormaliza (None, None, None, 128)   512       
_________________________________________________________________
conv_pw_3_relu (ReLU)        (None, None, None, 128)   0         
_________________________________________________________________
conv_pad_4 (ZeroPadding2D)   (None, None, None, 128)   0         
_________________________________________________________________
conv_dw_4 (DepthwiseConv2D)  (None, None, None, 128)   1152      
_________________________________________________________________
conv_dw_4_bn (BatchNormaliza (None, None, None, 128)   512       
_________________________________________________________________
conv_dw_4_relu (ReLU)        (None, None, None, 128)   0         
_________________________________________________________________
conv_pw_4 (Conv2D)           (None, None, None, 256)   32768     
_________________________________________________________________
conv_pw_4_bn (BatchNormaliza (None, None, None, 256)   1024      
_________________________________________________________________
conv_pw_4_relu (ReLU)        (None, None, None, 256)   0         
_________________________________________________________________
conv_dw_5 (DepthwiseConv2D)  (None, None, None, 256)   2304      
_________________________________________________________________
conv_dw_5_bn (BatchNormaliza (None, None, None, 256)   1024      
_________________________________________________________________
conv_dw_5_relu (ReLU)        (None, None, None, 256)   0         
_________________________________________________________________
conv_pw_5 (Conv2D)           (None, None, None, 256)   65536     
_________________________________________________________________
conv_pw_5_bn (BatchNormaliza (None, None, None, 256)   1024      
_________________________________________________________________
conv_pw_5_relu (ReLU)        (None, None, None, 256)   0         
_________________________________________________________________
conv_pad_6 (ZeroPadding2D)   (None, None, None, 256)   0         
_________________________________________________________________
conv_dw_6 (DepthwiseConv2D)  (None, None, None, 256)   2304      
_________________________________________________________________
conv_dw_6_bn (BatchNormaliza (None, None, None, 256)   1024      
_________________________________________________________________
conv_dw_6_relu (ReLU)        (None, None, None, 256)   0         
_________________________________________________________________
conv_pw_6 (Conv2D)           (None, None, None, 512)   131072    
_________________________________________________________________
conv_pw_6_bn (BatchNormaliza (None, None, None, 512)   2048      
_________________________________________________________________
conv_pw_6_relu (ReLU)        (None, None, None, 512)   0         
_________________________________________________________________
conv_dw_7 (DepthwiseConv2D)  (None, None, None, 512)   4608      
_________________________________________________________________
conv_dw_7_bn (BatchNormaliza (None, None, None, 512)   2048      
_________________________________________________________________
conv_dw_7_relu (ReLU)        (None, None, None, 512)   0         
_________________________________________________________________
conv_pw_7 (Conv2D)           (None, None, None, 512)   262144    
_________________________________________________________________
conv_pw_7_bn (BatchNormaliza (None, None, None, 512)   2048      
_________________________________________________________________
conv_pw_7_relu (ReLU)        (None, None, None, 512)   0         
_________________________________________________________________
conv_dw_8 (DepthwiseConv2D)  (None, None, None, 512)   4608      
_________________________________________________________________
conv_dw_8_bn (BatchNormaliza (None, None, None, 512)   2048      
_________________________________________________________________
conv_dw_8_relu (ReLU)        (None, None, None, 512)   0         
_________________________________________________________________
conv_pw_8 (Conv2D)           (None, None, None, 512)   262144    
_________________________________________________________________
conv_pw_8_bn (BatchNormaliza (None, None, None, 512)   2048      
_________________________________________________________________
conv_pw_8_relu (ReLU)        (None, None, None, 512)   0         
_________________________________________________________________
conv_dw_9 (DepthwiseConv2D)  (None, None, None, 512)   4608      
_________________________________________________________________
conv_dw_9_bn (BatchNormaliza (None, None, None, 512)   2048      
_________________________________________________________________
conv_dw_9_relu (ReLU)        (None, None, None, 512)   0         
_________________________________________________________________
conv_pw_9 (Conv2D)           (None, None, None, 512)   262144    
_________________________________________________________________
conv_pw_9_bn (BatchNormaliza (None, None, None, 512)   2048      
_________________________________________________________________
conv_pw_9_relu (ReLU)        (None, None, None, 512)   0         
_________________________________________________________________
conv_dw_10 (DepthwiseConv2D) (None, None, None, 512)   4608      
_________________________________________________________________
conv_dw_10_bn (BatchNormaliz (None, None, None, 512)   2048      
_________________________________________________________________
conv_dw_10_relu (ReLU)       (None, None, None, 512)   0         
_________________________________________________________________
conv_pw_10 (Conv2D)          (None, None, None, 512)   262144    
_________________________________________________________________
conv_pw_10_bn (BatchNormaliz (None, None, None, 512)   2048      
_________________________________________________________________
conv_pw_10_relu (ReLU)       (None, None, None, 512)   0         
_________________________________________________________________
conv_dw_11 (DepthwiseConv2D) (None, None, None, 512)   4608      
_________________________________________________________________
conv_dw_11_bn (BatchNormaliz (None, None, None, 512)   2048      
_________________________________________________________________
conv_dw_11_relu (ReLU)       (None, None, None, 512)   0         
_________________________________________________________________
conv_pw_11 (Conv2D)          (None, None, None, 512)   262144    
_________________________________________________________________
conv_pw_11_bn (BatchNormaliz (None, None, None, 512)   2048      
_________________________________________________________________
conv_pw_11_relu (ReLU)       (None, None, None, 512)   0         
_________________________________________________________________
conv_pad_12 (ZeroPadding2D)  (None, None, None, 512)   0         
_________________________________________________________________
conv_dw_12 (DepthwiseConv2D) (None, None, None, 512)   4608      
_________________________________________________________________
conv_dw_12_bn (BatchNormaliz (None, None, None, 512)   2048      
_________________________________________________________________
conv_dw_12_relu (ReLU)       (None, None, None, 512)   0         
_________________________________________________________________
conv_pw_12 (Conv2D)          (None, None, None, 1024)  524288    
_________________________________________________________________
conv_pw_12_bn (BatchNormaliz (None, None, None, 1024)  4096      
_________________________________________________________________
conv_pw_12_relu (ReLU)       (None, None, None, 1024)  0         
_________________________________________________________________
conv_dw_13 (DepthwiseConv2D) (None, None, None, 1024)  9216      
_________________________________________________________________
conv_dw_13_bn (BatchNormaliz (None, None, None, 1024)  4096      
_________________________________________________________________
conv_dw_13_relu (ReLU)       (None, None, None, 1024)  0         
_________________________________________________________________
conv_pw_13 (Conv2D)          (None, None, None, 1024)  1048576   
_________________________________________________________________
conv_pw_13_bn (BatchNormaliz (None, None, None, 1024)  4096      
_________________________________________________________________
conv_pw_13_relu (ReLU)       (None, None, None, 1024)  0         
_________________________________________________________________
global_average_pooling2d (Gl (None, 1024)              0         
_________________________________________________________________
dense (Dense)                (None, 64)                65600     
_________________________________________________________________
dense_1 (Dense)              (None, 10)                650       
=================================================================
Total params: 3,295,114
Trainable params: 3,273,226
Non-trainable params: 21,888
_________________________________________________________________
None
<class 'numpy.ndarray'>
10000
key:  3  D[d]:  1000
key:  8  D[d]:  1000
key:  0  D[d]:  1000
key:  6  D[d]:  1000
key:  1  D[d]:  1000
key:  9  D[d]:  1000
key:  5  D[d]:  1000
key:  7  D[d]:  1000
key:  4  D[d]:  1000
key:  2  D[d]:  1000
div_idx:  [3, 1, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [7, 6, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [2, 3, 0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [2, 6, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [5, 1, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [1, 7, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [8, 0, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [1, 5, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [0, 3, 7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [7, 2, 0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [6, 3, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [0, 3, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [7, 9, 6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [2, 7, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [6, 5, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [3, 0, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [6, 5, 0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [1, 5, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [9, 5, 0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [9, 4, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [2, 9, 0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [2, 0, 7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [1, 6, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [8, 7, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [7, 4, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [5, 6, 7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [7, 0, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [8, 1, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [9, 2, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [1, 7, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
<class 'numpy.ndarray'>
10000
key:  3  D[d]:  1000
key:  8  D[d]:  1000
key:  0  D[d]:  1000
key:  6  D[d]:  1000
key:  1  D[d]:  1000
key:  9  D[d]:  1000
key:  5  D[d]:  1000
key:  7  D[d]:  1000
key:  4  D[d]:  1000
key:  2  D[d]:  1000
div_idx:  [6, 3, 2]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (999, 69786)
div_idx:  [5, 0, 3]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (999, 69786)
div_idx:  [3, 5, 2]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (999, 69786)
div_idx:  [6, 3, 7]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (999, 69786)
div_idx:  [7, 6, 1]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (999, 69786)
div_idx:  [2, 6, 5]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (999, 69786)
div_idx:  [9, 1, 3]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (999, 69786)
div_idx:  [9, 3, 8]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (999, 69786)
div_idx:  [4, 0, 8]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (999, 69786)
div_idx:  [7, 3, 9]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (999, 69786)
div_idx:  [0, 2, 5]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (999, 69786)
div_idx:  [3, 5, 9]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (999, 69786)
div_idx:  [7, 4, 5]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (999, 69786)
div_idx:  [3, 6, 1]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (999, 69786)
div_idx:  [4, 0, 6]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (999, 69786)
div_idx:  [8, 4, 2]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (999, 69786)
div_idx:  [6, 7, 1]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (999, 69786)
div_idx:  [1, 8, 6]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (999, 69786)
div_idx:  [4, 5, 2]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (999, 69786)
div_idx:  [8, 1, 2]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (999, 69786)
div_idx:  [0, 9, 1]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (999, 69786)
div_idx:  [4, 3, 9]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (999, 69786)
div_idx:  [4, 9, 2]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (999, 69786)
div_idx:  [9, 1, 8]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (999, 69786)
div_idx:  [1, 6, 9]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (999, 69786)
div_idx:  [1, 7, 4]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (999, 69786)
div_idx:  [2, 0, 5]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (999, 69786)
div_idx:  [9, 2, 3]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (999, 69786)
div_idx:  [4, 8, 3]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (999, 69786)
div_idx:  [1, 9, 2]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (999, 69786)
<class 'numpy.ndarray'>
10000
key:  3  D[d]:  1000
key:  8  D[d]:  1000
key:  0  D[d]:  1000
key:  6  D[d]:  1000
key:  1  D[d]:  1000
key:  9  D[d]:  1000
key:  5  D[d]:  1000
key:  7  D[d]:  1000
key:  4  D[d]:  1000
key:  2  D[d]:  1000
div_idx:  [4, 5, 2]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (999, 348930)
div_idx:  [3, 1, 6]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (999, 348930)
div_idx:  [7, 2, 1]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (999, 348930)
div_idx:  [5, 6, 8]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (999, 348930)
div_idx:  [7, 0, 3]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (999, 348930)
div_idx:  [5, 3, 0]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (999, 348930)
div_idx:  [2, 1, 5]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (999, 348930)
div_idx:  [5, 4, 3]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (999, 348930)
div_idx:  [9, 7, 6]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (999, 348930)
div_idx:  [8, 4, 7]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (999, 348930)
div_idx:  [0, 9, 4]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (999, 348930)
div_idx:  [8, 3, 6]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (999, 348930)
div_idx:  [1, 5, 9]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (999, 348930)
div_idx:  [8, 0, 3]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (999, 348930)
div_idx:  [8, 3, 5]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (999, 348930)
div_idx:  [7, 4, 1]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (999, 348930)
div_idx:  [3, 7, 2]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (999, 348930)
div_idx:  [9, 5, 3]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (999, 348930)
div_idx:  [8, 5, 1]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (999, 348930)
div_idx:  [8, 4, 5]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (999, 348930)
div_idx:  [5, 0, 7]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (999, 348930)
div_idx:  [7, 9, 0]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (999, 348930)
div_idx:  [1, 4, 9]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (999, 348930)
div_idx:  [0, 8, 4]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (999, 348930)
div_idx:  [2, 4, 5]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (999, 348930)
div_idx:  [6, 7, 0]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (999, 348930)
div_idx:  [0, 5, 4]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (999, 348930)
div_idx:  [1, 0, 6]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (999, 348930)
div_idx:  [1, 0, 8]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (999, 348930)
div_idx:  [8, 3, 9]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (999, 348930)
<class 'numpy.ndarray'>
10000
key:  3  D[d]:  1000
key:  8  D[d]:  1000
key:  0  D[d]:  1000
key:  6  D[d]:  1000
key:  1  D[d]:  1000
key:  9  D[d]:  1000
key:  5  D[d]:  1000
key:  7  D[d]:  1000
key:  4  D[d]:  1000
key:  2  D[d]:  1000
div_idx:  [7, 0, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [0, 8, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [7, 6, 0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [2, 3, 0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [4, 1, 7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [8, 1, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [3, 4, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [1, 7, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [0, 5, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [0, 1, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [2, 9, 7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [0, 5, 7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [9, 2, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [0, 6, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [3, 1, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [6, 4, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [1, 3, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [3, 4, 6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [8, 9, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [9, 5, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [9, 1, 6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [4, 0, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [6, 1, 7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [6, 5, 0]
test_fitness.shape:  (10000, 34893)
size of selected fitness: /home/zhiyu/DeepSuite/adversarial/adv_function/trace.py:107: RuntimeWarning: invalid value encountered in true_divide
  neuron_value = (neuron_value - traces_low[i]) / unit[i]
 (999, 34893)
div_idx:  [0, 4, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [7, 1, 6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [6, 1, 7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [8, 2, 0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [0, 2, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [8, 0, 7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
<class 'numpy.ndarray'>
10000
key:  3  D[d]:  1000
key:  8  D[d]:  1000
key:  0  D[d]:  1000
key:  6  D[d]:  1000
key:  1  D[d]:  1000
key:  9  D[d]:  1000
key:  5  D[d]:  1000
key:  7  D[d]:  1000
key:  4  D[d]:  1000
key:  2  D[d]:  1000
div_idx:  [7, 1, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [1, 9, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [4, 3, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [9, 3, 6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [3, 9, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [1, 3, 7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [3, 5, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [1, 0, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [1, 8, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [6, 0, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [8, 4, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [3, 7, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [6, 8, 0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [4, 7, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [1, 7, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [0, 5, 6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [5, 7, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [5, 6, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [0, 7, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [5, 2, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [8, 4, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [3, 6, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [7, 4, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [7, 9, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [6, 0, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [7, 4, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [9, 4, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [0, 7, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [1, 9, 6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [4, 5, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
2021-06-30 17:19:45.177755: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcuda.so.1
2021-06-30 17:19:45.189157: E tensorflow/stream_executor/cuda/cuda_driver.cc:313] failed call to cuInit: CUDA_ERROR_NO_DEVICE: no CUDA-capable device is detected
2021-06-30 17:19:45.189207: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:169] retrieving CUDA diagnostic information for host: dell-PowerEdge-R940xa
2021-06-30 17:19:45.189213: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:176] hostname: dell-PowerEdge-R940xa
2021-06-30 17:19:45.189355: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:200] libcuda reported version is: 440.44.0
2021-06-30 17:19:45.189376: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:204] kernel reported version is: 440.44.0
2021-06-30 17:19:45.189382: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:310] kernel version seems to match DSO: 440.44.0
2021-06-30 17:19:45.189561: I tensorflow/core/platform/cpu_feature_guard.cc:143] Your CPU supports instructions that this TensorFlow binary was not compiled to use: SSE4.1 SSE4.2 AVX AVX2 AVX512F FMA
2021-06-30 17:19:45.226201: I tensorflow/core/platform/profile_utils/cpu_utils.cc:102] CPU Frequency: 2600000000 Hz
2021-06-30 17:19:45.235794: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0x555eaea41800 initialized for platform Host (this does not guarantee that XLA will be used). Devices:
2021-06-30 17:19:45.235847: I tensorflow/compiler/xla/service/service.cc:176]   StreamExecutor device (0): Host, Default Version
Namespace(batch_size=1024, dataset='cifar10', each_div=250, idc_layer='all', idc_n=6, iterations=30, k_kmnc=10, k_nc=0.75, k_tknc=1, model='MobileNet', num_div=4, ood_dataset='SUN', path='/media/data1/DeepSuite/', pool_iter=1000, pool_type='test', sa_layer=-1, sa_n=1000, save_path='/media/data1/DeepSuite', wrong_rate=0.1)
load MobileNet...
/media/data1/DeepSuite/trained_models/cifar10/MobileNet.h5
Model: "model"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
input_2 (InputLayer)         [(None, None, None, 3)]   0         
_________________________________________________________________
conv1_pad (ZeroPadding2D)    (None, None, None, 3)     0         
_________________________________________________________________
conv1 (Conv2D)               (None, None, None, 32)    864       
_________________________________________________________________
conv1_bn (BatchNormalization (None, None, None, 32)    128       
_________________________________________________________________
conv1_relu (ReLU)            (None, None, None, 32)    0         
_________________________________________________________________
conv_dw_1 (DepthwiseConv2D)  (None, None, None, 32)    288       
_________________________________________________________________
conv_dw_1_bn (BatchNormaliza (None, None, None, 32)    128       
_________________________________________________________________
conv_dw_1_relu (ReLU)        (None, None, None, 32)    0         
_________________________________________________________________
conv_pw_1 (Conv2D)           (None, None, None, 64)    2048      
_________________________________________________________________
conv_pw_1_bn (BatchNormaliza (None, None, None, 64)    256       
_________________________________________________________________
conv_pw_1_relu (ReLU)        (None, None, None, 64)    0         
_________________________________________________________________
conv_pad_2 (ZeroPadding2D)   (None, None, None, 64)    0         
_________________________________________________________________
conv_dw_2 (DepthwiseConv2D)  (None, None, None, 64)    576       
_________________________________________________________________
conv_dw_2_bn (BatchNormaliza (None, None, None, 64)    256       
_________________________________________________________________
conv_dw_2_relu (ReLU)        (None, None, None, 64)    0         
_________________________________________________________________
conv_pw_2 (Conv2D)           (None, None, None, 128)   8192      
_________________________________________________________________
conv_pw_2_bn (BatchNormaliza (None, None, None, 128)   512       
_________________________________________________________________
conv_pw_2_relu (ReLU)        (None, None, None, 128)   0         
_________________________________________________________________
conv_dw_3 (DepthwiseConv2D)  (None, None, None, 128)   1152      
_________________________________________________________________
conv_dw_3_bn (BatchNormaliza (None, None, None, 128)   512       
_________________________________________________________________
conv_dw_3_relu (ReLU)        (None, None, None, 128)   0         
_________________________________________________________________
conv_pw_3 (Conv2D)           (None, None, None, 128)   16384     
_________________________________________________________________
conv_pw_3_bn (BatchNormaliza (None, None, None, 128)   512       
_________________________________________________________________
conv_pw_3_relu (ReLU)        (None, None, None, 128)   0         
_________________________________________________________________
conv_pad_4 (ZeroPadding2D)   (None, None, None, 128)   0         
_________________________________________________________________
conv_dw_4 (DepthwiseConv2D)  (None, None, None, 128)   1152      
_________________________________________________________________
conv_dw_4_bn (BatchNormaliza (None, None, None, 128)   512       
_________________________________________________________________
conv_dw_4_relu (ReLU)        (None, None, None, 128)   0         
_________________________________________________________________
conv_pw_4 (Conv2D)           (None, None, None, 256)   32768     
_________________________________________________________________
conv_pw_4_bn (BatchNormaliza (None, None, None, 256)   1024      
_________________________________________________________________
conv_pw_4_relu (ReLU)        (None, None, None, 256)   0         
_________________________________________________________________
conv_dw_5 (DepthwiseConv2D)  (None, None, None, 256)   2304      
_________________________________________________________________
conv_dw_5_bn (BatchNormaliza (None, None, None, 256)   1024      
_________________________________________________________________
conv_dw_5_relu (ReLU)        (None, None, None, 256)   0         
_________________________________________________________________
conv_pw_5 (Conv2D)           (None, None, None, 256)   65536     
_________________________________________________________________
conv_pw_5_bn (BatchNormaliza (None, None, None, 256)   1024      
_________________________________________________________________
conv_pw_5_relu (ReLU)        (None, None, None, 256)   0         
_________________________________________________________________
conv_pad_6 (ZeroPadding2D)   (None, None, None, 256)   0         
_________________________________________________________________
conv_dw_6 (DepthwiseConv2D)  (None, None, None, 256)   2304      
_________________________________________________________________
conv_dw_6_bn (BatchNormaliza (None, None, None, 256)   1024      
_________________________________________________________________
conv_dw_6_relu (ReLU)        (None, None, None, 256)   0         
_________________________________________________________________
conv_pw_6 (Conv2D)           (None, None, None, 512)   131072    
_________________________________________________________________
conv_pw_6_bn (BatchNormaliza (None, None, None, 512)   2048      
_________________________________________________________________
conv_pw_6_relu (ReLU)        (None, None, None, 512)   0         
_________________________________________________________________
conv_dw_7 (DepthwiseConv2D)  (None, None, None, 512)   4608      
_________________________________________________________________
conv_dw_7_bn (BatchNormaliza (None, None, None, 512)   2048      
_________________________________________________________________
conv_dw_7_relu (ReLU)        (None, None, None, 512)   0         
_________________________________________________________________
conv_pw_7 (Conv2D)           (None, None, None, 512)   262144    
_________________________________________________________________
conv_pw_7_bn (BatchNormaliza (None, None, None, 512)   2048      
_________________________________________________________________
conv_pw_7_relu (ReLU)        (None, None, None, 512)   0         
_________________________________________________________________
conv_dw_8 (DepthwiseConv2D)  (None, None, None, 512)   4608      
_________________________________________________________________
conv_dw_8_bn (BatchNormaliza (None, None, None, 512)   2048      
_________________________________________________________________
conv_dw_8_relu (ReLU)        (None, None, None, 512)   0         
_________________________________________________________________
conv_pw_8 (Conv2D)           (None, None, None, 512)   262144    
_________________________________________________________________
conv_pw_8_bn (BatchNormaliza (None, None, None, 512)   2048      
_________________________________________________________________
conv_pw_8_relu (ReLU)        (None, None, None, 512)   0         
_________________________________________________________________
conv_dw_9 (DepthwiseConv2D)  (None, None, None, 512)   4608      
_________________________________________________________________
conv_dw_9_bn (BatchNormaliza (None, None, None, 512)   2048      
_________________________________________________________________
conv_dw_9_relu (ReLU)        (None, None, None, 512)   0         
_________________________________________________________________
conv_pw_9 (Conv2D)           (None, None, None, 512)   262144    
_________________________________________________________________
conv_pw_9_bn (BatchNormaliza (None, None, None, 512)   2048      
_________________________________________________________________
conv_pw_9_relu (ReLU)        (None, None, None, 512)   0         
_________________________________________________________________
conv_dw_10 (DepthwiseConv2D) (None, None, None, 512)   4608      
_________________________________________________________________
conv_dw_10_bn (BatchNormaliz (None, None, None, 512)   2048      
_________________________________________________________________
conv_dw_10_relu (ReLU)       (None, None, None, 512)   0         
_________________________________________________________________
conv_pw_10 (Conv2D)          (None, None, None, 512)   262144    
_________________________________________________________________
conv_pw_10_bn (BatchNormaliz (None, None, None, 512)   2048      
_________________________________________________________________
conv_pw_10_relu (ReLU)       (None, None, None, 512)   0         
_________________________________________________________________
conv_dw_11 (DepthwiseConv2D) (None, None, None, 512)   4608      
_________________________________________________________________
conv_dw_11_bn (BatchNormaliz (None, None, None, 512)   2048      
_________________________________________________________________
conv_dw_11_relu (ReLU)       (None, None, None, 512)   0         
_________________________________________________________________
conv_pw_11 (Conv2D)          (None, None, None, 512)   262144    
_________________________________________________________________
conv_pw_11_bn (BatchNormaliz (None, None, None, 512)   2048      
_________________________________________________________________
conv_pw_11_relu (ReLU)       (None, None, None, 512)   0         
_________________________________________________________________
conv_pad_12 (ZeroPadding2D)  (None, None, None, 512)   0         
_________________________________________________________________
conv_dw_12 (DepthwiseConv2D) (None, None, None, 512)   4608      
_________________________________________________________________
conv_dw_12_bn (BatchNormaliz (None, None, None, 512)   2048      
_________________________________________________________________
conv_dw_12_relu (ReLU)       (None, None, None, 512)   0         
_________________________________________________________________
conv_pw_12 (Conv2D)          (None, None, None, 1024)  524288    
_________________________________________________________________
conv_pw_12_bn (BatchNormaliz (None, None, None, 1024)  4096      
_________________________________________________________________
conv_pw_12_relu (ReLU)       (None, None, None, 1024)  0         
_________________________________________________________________
conv_dw_13 (DepthwiseConv2D) (None, None, None, 1024)  9216      
_________________________________________________________________
conv_dw_13_bn (BatchNormaliz (None, None, None, 1024)  4096      
_________________________________________________________________
conv_dw_13_relu (ReLU)       (None, None, None, 1024)  0         
_________________________________________________________________
conv_pw_13 (Conv2D)          (None, None, None, 1024)  1048576   
_________________________________________________________________
conv_pw_13_bn (BatchNormaliz (None, None, None, 1024)  4096      
_________________________________________________________________
conv_pw_13_relu (ReLU)       (None, None, None, 1024)  0         
_________________________________________________________________
global_average_pooling2d (Gl (None, 1024)              0         
_________________________________________________________________
dense (Dense)                (None, 64)                65600     
_________________________________________________________________
dense_1 (Dense)              (None, 10)                650       
=================================================================
Total params: 3,295,114
Trainable params: 3,273,226
Non-trainable params: 21,888
_________________________________________________________________
None
<class 'numpy.ndarray'>
10000
key:  3  D[d]:  1000
key:  8  D[d]:  1000
key:  0  D[d]:  1000
key:  6  D[d]:  1000
key:  1  D[d]:  1000
key:  9  D[d]:  1000
key:  5  D[d]:  1000
key:  7  D[d]:  1000
key:  4  D[d]:  1000
key:  2  D[d]:  1000
div_idx:  [3, 1, 8, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [4, 0, 9, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [1, 9, 0, 7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [7, 2, 4, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [9, 2, 6, 0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [0, 4, 2, 7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [9, 2, 7, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [7, 4, 1, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [7, 6, 4, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [9, 7, 2, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [9, 6, 4, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [2, 7, 4, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [8, 1, 0, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [0, 9, 2, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [2, 8, 5, 6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [3, 0, 6, 7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [9, 7, 0, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [4, 1, 6, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [9, 1, 2, 6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [6, 1, 0, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [0, 7, 6, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [5, 0, 1, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [7, 3, 9, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [8, 3, 0, 7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [6, 9, 5, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [2, 0, 1, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [8, 1, 0, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [9, 1, 3, 6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [7, 2, 4, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [5, 9, 8, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
<class 'numpy.ndarray'>
10000
key:  3  D[d]:  1000
key:  8  D[d]:  1000
key:  0  D[d]:  1000
key:  6  D[d]:  1000
key:  1  D[d]:  1000
key:  9  D[d]:  1000
key:  5  D[d]:  1000
key:  7  D[d]:  1000
key:  4  D[d]:  1000
key:  2  D[d]:  1000
div_idx:  [7, 9, 5, 8]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [1, 4, 7, 9]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [3, 9, 5, 1]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [9, 5, 6, 2]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [1, 7, 3, 5]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [9, 7, 8, 4]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [2, 9, 0, 8]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [6, 5, 3, 2]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [2, 4, 0, 5]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [6, 1, 9, 2]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [8, 1, 0, 4]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [8, 7, 0, 9]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [1, 4, 6, 0]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [7, 5, 0, 9]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [0, 4, 8, 3]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [8, 2, 9, 6]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [7, 4, 5, 8]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [2, 1, 5, 3]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [0, 9, 8, 2]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [2, 7, 0, 9]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [5, 4, 1, 7]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [9, 3, 6, 7]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [4, 2, 1, 7]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [6, 5, 1, 2]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [1, 3, 5, 6]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [2, 6, 4, 5]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [1, 7, 8, 9]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [3, 8, 4, 9]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [6, 1, 2, 0]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [0, 2, 7, 5]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
<class 'numpy.ndarray'>
10000
key:  3  D[d]:  1000
key:  8  D[d]:  1000
key:  0  D[d]:  1000
key:  6  D[d]:  1000
key:  1  D[d]:  1000
key:  9  D[d]:  1000
key:  5  D[d]:  1000
key:  7  D[d]:  1000
key:  4  D[d]:  1000
key:  2  D[d]:  1000
div_idx:  [4, 9, 1, 5]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [2, 0, 3, 4]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [6, 5, 0, 1]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [7, 5, 0, 8]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [0, 7, 1, 8]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [1, 6, 5, 7]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [7, 9, 6, 3]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [9, 5, 6, 4]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [3, 0, 2, 8]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [1, 0, 8, 4]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [7, 3, 5, 0]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [3, 0, 1, 7]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [3, 6, 9, 4]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [2, 9, 7, 8]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [8, 9, 6, 4]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [7, 0, 2, 6]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [8, 4, 7, 2]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [9, 2, 4, 5]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [4, 9, 3, 5]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [8, 1, 4, 5]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [8, 9, 1, 0]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [8, 7, 9, 4]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [4, 5, 6, 1]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [9, 6, 7, 5]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [1, 0, 5, 2]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [1, 6, 2, 8]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [7, 4, 5, 8]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [8, 5, 4, 2]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [0, 1, 8, 3]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [5, 4, 9, 2]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
<class 'numpy.ndarray'>
10000
key:  3  D[d]:  1000
key:  8  D[d]:  1000
key:  0  D[d]:  1000
key:  6  D[d]:  1000
key:  1  D[d]:  1000
key:  9  D[d]:  1000
key:  5  D[d]:  1000
key:  7  D[d]:  1000
key:  4  D[d]:  1000
key:  2  D[d]:  1000
div_idx:  [8, 3, 6, 0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [4, 2, 7, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [7, 2, 6, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [0, 8, 9, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [0, 3, 7, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [8, 0, 6, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [9, 1, 7, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [0, 3, 4, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [5, 2, 0, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [0, 7, 9, 6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [7, 1, 2, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [9, 5, 7, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [7, 5, 9, 6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [3, 7, 9, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [7, 1, 4, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [6, 5, 1, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [2, 5, 3, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [5, 4, 8, 7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [5, 2, 6, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [4, 1, 3, 5]
test_fitness.shape: /home/zhiyu/DeepSuite/adversarial/adv_function/trace.py:107: RuntimeWarning: invalid value encountered in true_divide
  neuron_value = (neuron_value - traces_low[i]) / unit[i]
 (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [6, 3, 8, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [9, 4, 1, 0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [2, 3, 9, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [1, 7, 2, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [0, 5, 1, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [5, 0, 1, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [3, 9, 5, 6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [7, 0, 3, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [8, 1, 2, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [0, 1, 8, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
<class 'numpy.ndarray'>
10000
key:  3  D[d]:  1000
key:  8  D[d]:  1000
key:  0  D[d]:  1000
key:  6  D[d]:  1000
key:  1  D[d]:  1000
key:  9  D[d]:  1000
key:  5  D[d]:  1000
key:  7  D[d]:  1000
key:  4  D[d]:  1000
key:  2  D[d]:  1000
div_idx:  [1, 6, 3, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [5, 8, 7, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [3, 8, 7, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [5, 8, 4, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [9, 4, 0, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [6, 3, 8, 7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [9, 3, 1, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [7, 8, 6, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [7, 8, 5, 0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [7, 2, 6, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [9, 8, 0, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [1, 9, 3, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [0, 2, 7, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [0, 3, 7, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [8, 4, 7, 0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [5, 7, 6, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [8, 1, 2, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [3, 1, 8, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [6, 9, 1, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [8, 6, 9, 7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [8, 7, 4, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [1, 8, 5, 0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [5, 8, 4, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [5, 8, 0, 6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [9, 3, 1, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [9, 0, 4, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [9, 8, 1, 7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [1, 9, 7, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [3, 7, 4, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [4, 9, 1, 0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
2021-06-30 17:23:46.292938: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcuda.so.1
2021-06-30 17:23:46.398234: E tensorflow/stream_executor/cuda/cuda_driver.cc:313] failed call to cuInit: CUDA_ERROR_NO_DEVICE: no CUDA-capable device is detected
2021-06-30 17:23:46.398280: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:169] retrieving CUDA diagnostic information for host: dell-PowerEdge-R940xa
2021-06-30 17:23:46.398288: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:176] hostname: dell-PowerEdge-R940xa
2021-06-30 17:23:46.398422: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:200] libcuda reported version is: 440.44.0
2021-06-30 17:23:46.398444: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:204] kernel reported version is: 440.44.0
2021-06-30 17:23:46.398450: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:310] kernel version seems to match DSO: 440.44.0
2021-06-30 17:23:46.398652: I tensorflow/core/platform/cpu_feature_guard.cc:143] Your CPU supports instructions that this TensorFlow binary was not compiled to use: SSE4.1 SSE4.2 AVX AVX2 AVX512F FMA
2021-06-30 17:23:46.434128: I tensorflow/core/platform/profile_utils/cpu_utils.cc:102] CPU Frequency: 2600000000 Hz
2021-06-30 17:23:46.440192: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0x55ef849681f0 initialized for platform Host (this does not guarantee that XLA will be used). Devices:
2021-06-30 17:23:46.440231: I tensorflow/compiler/xla/service/service.cc:176]   StreamExecutor device (0): Host, Default Version
Namespace(batch_size=1024, dataset='cifar10', each_div=200, idc_layer='all', idc_n=6, iterations=30, k_kmnc=10, k_nc=0.75, k_tknc=1, model='MobileNet', num_div=5, ood_dataset='SUN', path='/media/data1/DeepSuite/', pool_iter=1000, pool_type='test', sa_layer=-1, sa_n=1000, save_path='/media/data1/DeepSuite', wrong_rate=0.1)
load MobileNet...
/media/data1/DeepSuite/trained_models/cifar10/MobileNet.h5
Model: "model"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
input_2 (InputLayer)         [(None, None, None, 3)]   0         
_________________________________________________________________
conv1_pad (ZeroPadding2D)    (None, None, None, 3)     0         
_________________________________________________________________
conv1 (Conv2D)               (None, None, None, 32)    864       
_________________________________________________________________
conv1_bn (BatchNormalization (None, None, None, 32)    128       
_________________________________________________________________
conv1_relu (ReLU)            (None, None, None, 32)    0         
_________________________________________________________________
conv_dw_1 (DepthwiseConv2D)  (None, None, None, 32)    288       
_________________________________________________________________
conv_dw_1_bn (BatchNormaliza (None, None, None, 32)    128       
_________________________________________________________________
conv_dw_1_relu (ReLU)        (None, None, None, 32)    0         
_________________________________________________________________
conv_pw_1 (Conv2D)           (None, None, None, 64)    2048      
_________________________________________________________________
conv_pw_1_bn (BatchNormaliza (None, None, None, 64)    256       
_________________________________________________________________
conv_pw_1_relu (ReLU)        (None, None, None, 64)    0         
_________________________________________________________________
conv_pad_2 (ZeroPadding2D)   (None, None, None, 64)    0         
_________________________________________________________________
conv_dw_2 (DepthwiseConv2D)  (None, None, None, 64)    576       
_________________________________________________________________
conv_dw_2_bn (BatchNormaliza (None, None, None, 64)    256       
_________________________________________________________________
conv_dw_2_relu (ReLU)        (None, None, None, 64)    0         
_________________________________________________________________
conv_pw_2 (Conv2D)           (None, None, None, 128)   8192      
_________________________________________________________________
conv_pw_2_bn (BatchNormaliza (None, None, None, 128)   512       
_________________________________________________________________
conv_pw_2_relu (ReLU)        (None, None, None, 128)   0         
_________________________________________________________________
conv_dw_3 (DepthwiseConv2D)  (None, None, None, 128)   1152      
_________________________________________________________________
conv_dw_3_bn (BatchNormaliza (None, None, None, 128)   512       
_________________________________________________________________
conv_dw_3_relu (ReLU)        (None, None, None, 128)   0         
_________________________________________________________________
conv_pw_3 (Conv2D)           (None, None, None, 128)   16384     
_________________________________________________________________
conv_pw_3_bn (BatchNormaliza (None, None, None, 128)   512       
_________________________________________________________________
conv_pw_3_relu (ReLU)        (None, None, None, 128)   0         
_________________________________________________________________
conv_pad_4 (ZeroPadding2D)   (None, None, None, 128)   0         
_________________________________________________________________
conv_dw_4 (DepthwiseConv2D)  (None, None, None, 128)   1152      
_________________________________________________________________
conv_dw_4_bn (BatchNormaliza (None, None, None, 128)   512       
_________________________________________________________________
conv_dw_4_relu (ReLU)        (None, None, None, 128)   0         
_________________________________________________________________
conv_pw_4 (Conv2D)           (None, None, None, 256)   32768     
_________________________________________________________________
conv_pw_4_bn (BatchNormaliza (None, None, None, 256)   1024      
_________________________________________________________________
conv_pw_4_relu (ReLU)        (None, None, None, 256)   0         
_________________________________________________________________
conv_dw_5 (DepthwiseConv2D)  (None, None, None, 256)   2304      
_________________________________________________________________
conv_dw_5_bn (BatchNormaliza (None, None, None, 256)   1024      
_________________________________________________________________
conv_dw_5_relu (ReLU)        (None, None, None, 256)   0         
_________________________________________________________________
conv_pw_5 (Conv2D)           (None, None, None, 256)   65536     
_________________________________________________________________
conv_pw_5_bn (BatchNormaliza (None, None, None, 256)   1024      
_________________________________________________________________
conv_pw_5_relu (ReLU)        (None, None, None, 256)   0         
_________________________________________________________________
conv_pad_6 (ZeroPadding2D)   (None, None, None, 256)   0         
_________________________________________________________________
conv_dw_6 (DepthwiseConv2D)  (None, None, None, 256)   2304      
_________________________________________________________________
conv_dw_6_bn (BatchNormaliza (None, None, None, 256)   1024      
_________________________________________________________________
conv_dw_6_relu (ReLU)        (None, None, None, 256)   0         
_________________________________________________________________
conv_pw_6 (Conv2D)           (None, None, None, 512)   131072    
_________________________________________________________________
conv_pw_6_bn (BatchNormaliza (None, None, None, 512)   2048      
_________________________________________________________________
conv_pw_6_relu (ReLU)        (None, None, None, 512)   0         
_________________________________________________________________
conv_dw_7 (DepthwiseConv2D)  (None, None, None, 512)   4608      
_________________________________________________________________
conv_dw_7_bn (BatchNormaliza (None, None, None, 512)   2048      
_________________________________________________________________
conv_dw_7_relu (ReLU)        (None, None, None, 512)   0         
_________________________________________________________________
conv_pw_7 (Conv2D)           (None, None, None, 512)   262144    
_________________________________________________________________
conv_pw_7_bn (BatchNormaliza (None, None, None, 512)   2048      
_________________________________________________________________
conv_pw_7_relu (ReLU)        (None, None, None, 512)   0         
_________________________________________________________________
conv_dw_8 (DepthwiseConv2D)  (None, None, None, 512)   4608      
_________________________________________________________________
conv_dw_8_bn (BatchNormaliza (None, None, None, 512)   2048      
_________________________________________________________________
conv_dw_8_relu (ReLU)        (None, None, None, 512)   0         
_________________________________________________________________
conv_pw_8 (Conv2D)           (None, None, None, 512)   262144    
_________________________________________________________________
conv_pw_8_bn (BatchNormaliza (None, None, None, 512)   2048      
_________________________________________________________________
conv_pw_8_relu (ReLU)        (None, None, None, 512)   0         
_________________________________________________________________
conv_dw_9 (DepthwiseConv2D)  (None, None, None, 512)   4608      
_________________________________________________________________
conv_dw_9_bn (BatchNormaliza (None, None, None, 512)   2048      
_________________________________________________________________
conv_dw_9_relu (ReLU)        (None, None, None, 512)   0         
_________________________________________________________________
conv_pw_9 (Conv2D)           (None, None, None, 512)   262144    
_________________________________________________________________
conv_pw_9_bn (BatchNormaliza (None, None, None, 512)   2048      
_________________________________________________________________
conv_pw_9_relu (ReLU)        (None, None, None, 512)   0         
_________________________________________________________________
conv_dw_10 (DepthwiseConv2D) (None, None, None, 512)   4608      
_________________________________________________________________
conv_dw_10_bn (BatchNormaliz (None, None, None, 512)   2048      
_________________________________________________________________
conv_dw_10_relu (ReLU)       (None, None, None, 512)   0         
_________________________________________________________________
conv_pw_10 (Conv2D)          (None, None, None, 512)   262144    
_________________________________________________________________
conv_pw_10_bn (BatchNormaliz (None, None, None, 512)   2048      
_________________________________________________________________
conv_pw_10_relu (ReLU)       (None, None, None, 512)   0         
_________________________________________________________________
conv_dw_11 (DepthwiseConv2D) (None, None, None, 512)   4608      
_________________________________________________________________
conv_dw_11_bn (BatchNormaliz (None, None, None, 512)   2048      
_________________________________________________________________
conv_dw_11_relu (ReLU)       (None, None, None, 512)   0         
_________________________________________________________________
conv_pw_11 (Conv2D)          (None, None, None, 512)   262144    
_________________________________________________________________
conv_pw_11_bn (BatchNormaliz (None, None, None, 512)   2048      
_________________________________________________________________
conv_pw_11_relu (ReLU)       (None, None, None, 512)   0         
_________________________________________________________________
conv_pad_12 (ZeroPadding2D)  (None, None, None, 512)   0         
_________________________________________________________________
conv_dw_12 (DepthwiseConv2D) (None, None, None, 512)   4608      
_________________________________________________________________
conv_dw_12_bn (BatchNormaliz (None, None, None, 512)   2048      
_________________________________________________________________
conv_dw_12_relu (ReLU)       (None, None, None, 512)   0         
_________________________________________________________________
conv_pw_12 (Conv2D)          (None, None, None, 1024)  524288    
_________________________________________________________________
conv_pw_12_bn (BatchNormaliz (None, None, None, 1024)  4096      
_________________________________________________________________
conv_pw_12_relu (ReLU)       (None, None, None, 1024)  0         
_________________________________________________________________
conv_dw_13 (DepthwiseConv2D) (None, None, None, 1024)  9216      
_________________________________________________________________
conv_dw_13_bn (BatchNormaliz (None, None, None, 1024)  4096      
_________________________________________________________________
conv_dw_13_relu (ReLU)       (None, None, None, 1024)  0         
_________________________________________________________________
conv_pw_13 (Conv2D)          (None, None, None, 1024)  1048576   
_________________________________________________________________
conv_pw_13_bn (BatchNormaliz (None, None, None, 1024)  4096      
_________________________________________________________________
conv_pw_13_relu (ReLU)       (None, None, None, 1024)  0         
_________________________________________________________________
global_average_pooling2d (Gl (None, 1024)              0         
_________________________________________________________________
dense (Dense)                (None, 64)                65600     
_________________________________________________________________
dense_1 (Dense)              (None, 10)                650       
=================================================================
Total params: 3,295,114
Trainable params: 3,273,226
Non-trainable params: 21,888
_________________________________________________________________
None
<class 'numpy.ndarray'>
10000
key:  3  D[d]:  1000
key:  8  D[d]:  1000
key:  0  D[d]:  1000
key:  6  D[d]:  1000
key:  1  D[d]:  1000
key:  9  D[d]:  1000
key:  5  D[d]:  1000
key:  7  D[d]:  1000
key:  4  D[d]:  1000
key:  2  D[d]:  1000
div_idx:  [3, 1, 8, 5, 6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [7, 0, 6, 3, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [7, 9, 8, 3, 6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [1, 0, 4, 2, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [8, 5, 6, 7, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [0, 2, 5, 6, 7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [9, 0, 2, 8, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [9, 7, 1, 6, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [6, 7, 5, 2, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [7, 8, 0, 2, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [5, 7, 6, 8, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [7, 0, 8, 9, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [4, 7, 1, 2, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [9, 0, 7, 3, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [3, 7, 6, 5, 0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [3, 4, 0, 9, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [6, 4, 7, 3, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [6, 2, 4, 0, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [4, 6, 7, 0, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [2, 4, 5, 0, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [1, 5, 2, 4, 6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [8, 2, 0, 4, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [8, 3, 9, 5, 6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [9, 2, 1, 7, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [0, 9, 6, 2, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [3, 2, 1, 8, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [1, 6, 7, 0, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [3, 2, 0, 7, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [5, 4, 7, 2, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [2, 8, 9, 3, 6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
<class 'numpy.ndarray'>
10000
key:  3  D[d]:  1000
key:  8  D[d]:  1000
key:  0  D[d]:  1000
key:  6  D[d]:  1000
key:  1  D[d]:  1000
key:  9  D[d]:  1000
key:  5  D[d]:  1000
key:  7  D[d]:  1000
key:  4  D[d]:  1000
key:  2  D[d]:  1000
div_idx:  [2, 1, 3, 6, 0]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [8, 5, 7, 1, 0]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [9, 3, 2, 7, 4]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [5, 4, 7, 1, 0]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [4, 5, 2, 9, 7]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [6, 1, 0, 9, 3]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [4, 6, 0, 3, 9]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [1, 3, 8, 0, 2]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [3, 8, 9, 2, 4]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [3, 6, 8, 5, 1]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [2, 4, 5, 3, 1]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [9, 5, 7, 6, 4]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [2, 6, 7, 4, 8]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [9, 5, 8, 2, 7]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [0, 3, 1, 7, 9]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [2, 3, 6, 9, 5]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [2, 7, 8, 9, 3]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [9, 7, 5, 0, 1]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [8, 3, 1, 5, 2]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [6, 9, 0, 4, 2]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [0, 4, 8, 9, 2]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [9, 3, 8, 0, 1]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [9, 2, 4, 6, 7]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [0, 1, 7, 6, 5]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [0, 9, 5, 4, 3]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [3, 2, 1, 9, 8]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [8, 9, 0, 2, 1]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [3, 2, 1, 8, 7]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [2, 5, 0, 3, 6]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [4, 9, 7, 8, 5]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
<class 'numpy.ndarray'>
10000
key:  3  D[d]:  1000
key:  8  D[d]:  1000
key:  0  D[d]:  1000
key:  6  D[d]:  1000
key:  1  D[d]:  1000
key:  9  D[d]:  1000
key:  5  D[d]:  1000
key:  7  D[d]:  1000
key:  4  D[d]:  1000
key:  2  D[d]:  1000
div_idx:  [4, 1, 6, 3, 0]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [2, 8, 4, 6, 3]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [9, 2, 6, 3, 7]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [5, 6, 8, 3, 4]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [0, 1, 4, 6, 2]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [0, 3, 4, 8, 1]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [5, 1, 9, 6, 0]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [8, 3, 1, 7, 0]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [0, 4, 8, 7, 9]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [1, 3, 2, 5, 6]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [8, 0, 5, 4, 1]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [2, 9, 0, 8, 5]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [7, 6, 9, 3, 2]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [7, 6, 2, 1, 9]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [7, 3, 8, 0, 2]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [9, 6, 7, 0, 2]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [9, 6, 0, 3, 7]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [7, 2, 9, 1, 6]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [7, 3, 1, 0, 6]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [6, 2, 1, 8, 7]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [3, 4, 8, 9, 1]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [9, 1, 6, 5, 4]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [7, 9, 8, 2, 5]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [5, 1, 8, 9, 3]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [4, 1, 6, 3, 7]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [8, 3, 0, 7, 5]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [8, 1, 0, 2, 3]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [8, 6, 4, 5, 7]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [5, 0, 2, 1, 7]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [8, 7, 3, 6, 2]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
<class 'numpy.ndarray'>
10000
key:  3  D[d]:  1000
key:  8  D[d]:  1000
key:  0  D[d]:  1000
key:  6  D[d]:  1000
key:  1  D[d]:  1000
key:  9  D[d]:  1000
key:  5  D[d]:  1000
key:  7  D[d]:  1000
key:  4  D[d]:  1000
key:  2  D[d]:  1000
div_idx:  [0, 5, 1, 8, 7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [1, 3, 8, 7, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [2, 1, 6, 3, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [7, 2, 5, 6, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [7, 4, 6, 0, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [4, 2, 7, 5, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [9, 1, 0, 7, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [5, 1, 2, 7, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [6, 5, 2, 9, 7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [9, 7, 8, 0, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [9, 3, 7, 2, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [7, 9, 4, 1, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [5, 8, 3, 0, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [7, 2, 0, 3, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [4, 6, 1, 9, 0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [7, 3, 6, 0, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [0, 2, 6, 9, 1]/home/zhiyu/DeepSuite/adversarial/adv_function/trace.py:107: RuntimeWarning: invalid value encountered in true_divide
  neuron_value = (neuron_value - traces_low[i]) / unit[i]

test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [9, 1, 3, 5, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [0, 5, 9, 1, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [6, 7, 1, 5, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [5, 3, 2, 4, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [2, 1, 6, 9, 7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [3, 9, 4, 6, 0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [0, 4, 9, 3, 6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [0, 3, 4, 9, 7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [7, 6, 0, 9, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [6, 3, 7, 2, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [7, 6, 3, 1, 0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [4, 2, 3, 8, 0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [2, 5, 3, 4, 7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
<class 'numpy.ndarray'>
10000
key:  3  D[d]:  1000
key:  8  D[d]:  1000
key:  0  D[d]:  1000
key:  6  D[d]:  1000
key:  1  D[d]:  1000
key:  9  D[d]:  1000
key:  5  D[d]:  1000
key:  7  D[d]:  1000
key:  4  D[d]:  1000
key:  2  D[d]:  1000
div_idx:  [6, 8, 0, 5, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [8, 9, 4, 5, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [6, 4, 0, 8, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [2, 3, 5, 0, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [0, 3, 5, 2, 7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [7, 4, 1, 0, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [4, 7, 6, 1, 0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [5, 4, 1, 7, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [0, 1, 8, 9, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [3, 1, 5, 6, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [2, 9, 3, 4, 0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [3, 5, 0, 1, 6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [4, 3, 9, 5, 0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [1, 0, 5, 3, 6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [0, 9, 1, 3, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [3, 7, 5, 9, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [8, 4, 5, 3, 6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [9, 4, 6, 0, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [6, 8, 2, 4, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [8, 3, 0, 5, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [1, 7, 5, 6, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [7, 4, 2, 0, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [3, 5, 7, 9, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [7, 6, 5, 1, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [5, 9, 2, 8, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [4, 5, 3, 7, 0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [7, 4, 5, 0, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [8, 9, 3, 1, 0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [1, 6, 3, 0, 7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [5, 4, 7, 1, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
2021-06-30 17:27:31.801366: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcuda.so.1
2021-06-30 17:27:31.813444: E tensorflow/stream_executor/cuda/cuda_driver.cc:313] failed call to cuInit: CUDA_ERROR_NO_DEVICE: no CUDA-capable device is detected
2021-06-30 17:27:31.813493: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:169] retrieving CUDA diagnostic information for host: dell-PowerEdge-R940xa
2021-06-30 17:27:31.813500: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:176] hostname: dell-PowerEdge-R940xa
2021-06-30 17:27:31.813746: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:200] libcuda reported version is: 440.44.0
2021-06-30 17:27:31.813768: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:204] kernel reported version is: 440.44.0
2021-06-30 17:27:31.813773: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:310] kernel version seems to match DSO: 440.44.0
2021-06-30 17:27:31.813990: I tensorflow/core/platform/cpu_feature_guard.cc:143] Your CPU supports instructions that this TensorFlow binary was not compiled to use: SSE4.1 SSE4.2 AVX AVX2 AVX512F FMA
2021-06-30 17:27:31.858313: I tensorflow/core/platform/profile_utils/cpu_utils.cc:102] CPU Frequency: 2600000000 Hz
2021-06-30 17:27:31.868279: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0x564c06e17ef0 initialized for platform Host (this does not guarantee that XLA will be used). Devices:
2021-06-30 17:27:31.868348: I tensorflow/compiler/xla/service/service.cc:176]   StreamExecutor device (0): Host, Default Version
Namespace(batch_size=1024, dataset='cifar10', each_div=166, idc_layer='all', idc_n=6, iterations=30, k_kmnc=10, k_nc=0.75, k_tknc=1, model='MobileNet', num_div=6, ood_dataset='SUN', path='/media/data1/DeepSuite/', pool_iter=1000, pool_type='test', sa_layer=-1, sa_n=1000, save_path='/media/data1/DeepSuite', wrong_rate=0.1)
load MobileNet...
/media/data1/DeepSuite/trained_models/cifar10/MobileNet.h5
Model: "model"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
input_2 (InputLayer)         [(None, None, None, 3)]   0         
_________________________________________________________________
conv1_pad (ZeroPadding2D)    (None, None, None, 3)     0         
_________________________________________________________________
conv1 (Conv2D)               (None, None, None, 32)    864       
_________________________________________________________________
conv1_bn (BatchNormalization (None, None, None, 32)    128       
_________________________________________________________________
conv1_relu (ReLU)            (None, None, None, 32)    0         
_________________________________________________________________
conv_dw_1 (DepthwiseConv2D)  (None, None, None, 32)    288       
_________________________________________________________________
conv_dw_1_bn (BatchNormaliza (None, None, None, 32)    128       
_________________________________________________________________
conv_dw_1_relu (ReLU)        (None, None, None, 32)    0         
_________________________________________________________________
conv_pw_1 (Conv2D)           (None, None, None, 64)    2048      
_________________________________________________________________
conv_pw_1_bn (BatchNormaliza (None, None, None, 64)    256       
_________________________________________________________________
conv_pw_1_relu (ReLU)        (None, None, None, 64)    0         
_________________________________________________________________
conv_pad_2 (ZeroPadding2D)   (None, None, None, 64)    0         
_________________________________________________________________
conv_dw_2 (DepthwiseConv2D)  (None, None, None, 64)    576       
_________________________________________________________________
conv_dw_2_bn (BatchNormaliza (None, None, None, 64)    256       
_________________________________________________________________
conv_dw_2_relu (ReLU)        (None, None, None, 64)    0         
_________________________________________________________________
conv_pw_2 (Conv2D)           (None, None, None, 128)   8192      
_________________________________________________________________
conv_pw_2_bn (BatchNormaliza (None, None, None, 128)   512       
_________________________________________________________________
conv_pw_2_relu (ReLU)        (None, None, None, 128)   0         
_________________________________________________________________
conv_dw_3 (DepthwiseConv2D)  (None, None, None, 128)   1152      
_________________________________________________________________
conv_dw_3_bn (BatchNormaliza (None, None, None, 128)   512       
_________________________________________________________________
conv_dw_3_relu (ReLU)        (None, None, None, 128)   0         
_________________________________________________________________
conv_pw_3 (Conv2D)           (None, None, None, 128)   16384     
_________________________________________________________________
conv_pw_3_bn (BatchNormaliza (None, None, None, 128)   512       
_________________________________________________________________
conv_pw_3_relu (ReLU)        (None, None, None, 128)   0         
_________________________________________________________________
conv_pad_4 (ZeroPadding2D)   (None, None, None, 128)   0         
_________________________________________________________________
conv_dw_4 (DepthwiseConv2D)  (None, None, None, 128)   1152      
_________________________________________________________________
conv_dw_4_bn (BatchNormaliza (None, None, None, 128)   512       
_________________________________________________________________
conv_dw_4_relu (ReLU)        (None, None, None, 128)   0         
_________________________________________________________________
conv_pw_4 (Conv2D)           (None, None, None, 256)   32768     
_________________________________________________________________
conv_pw_4_bn (BatchNormaliza (None, None, None, 256)   1024      
_________________________________________________________________
conv_pw_4_relu (ReLU)        (None, None, None, 256)   0         
_________________________________________________________________
conv_dw_5 (DepthwiseConv2D)  (None, None, None, 256)   2304      
_________________________________________________________________
conv_dw_5_bn (BatchNormaliza (None, None, None, 256)   1024      
_________________________________________________________________
conv_dw_5_relu (ReLU)        (None, None, None, 256)   0         
_________________________________________________________________
conv_pw_5 (Conv2D)           (None, None, None, 256)   65536     
_________________________________________________________________
conv_pw_5_bn (BatchNormaliza (None, None, None, 256)   1024      
_________________________________________________________________
conv_pw_5_relu (ReLU)        (None, None, None, 256)   0         
_________________________________________________________________
conv_pad_6 (ZeroPadding2D)   (None, None, None, 256)   0         
_________________________________________________________________
conv_dw_6 (DepthwiseConv2D)  (None, None, None, 256)   2304      
_________________________________________________________________
conv_dw_6_bn (BatchNormaliza (None, None, None, 256)   1024      
_________________________________________________________________
conv_dw_6_relu (ReLU)        (None, None, None, 256)   0         
_________________________________________________________________
conv_pw_6 (Conv2D)           (None, None, None, 512)   131072    
_________________________________________________________________
conv_pw_6_bn (BatchNormaliza (None, None, None, 512)   2048      
_________________________________________________________________
conv_pw_6_relu (ReLU)        (None, None, None, 512)   0         
_________________________________________________________________
conv_dw_7 (DepthwiseConv2D)  (None, None, None, 512)   4608      
_________________________________________________________________
conv_dw_7_bn (BatchNormaliza (None, None, None, 512)   2048      
_________________________________________________________________
conv_dw_7_relu (ReLU)        (None, None, None, 512)   0         
_________________________________________________________________
conv_pw_7 (Conv2D)           (None, None, None, 512)   262144    
_________________________________________________________________
conv_pw_7_bn (BatchNormaliza (None, None, None, 512)   2048      
_________________________________________________________________
conv_pw_7_relu (ReLU)        (None, None, None, 512)   0         
_________________________________________________________________
conv_dw_8 (DepthwiseConv2D)  (None, None, None, 512)   4608      
_________________________________________________________________
conv_dw_8_bn (BatchNormaliza (None, None, None, 512)   2048      
_________________________________________________________________
conv_dw_8_relu (ReLU)        (None, None, None, 512)   0         
_________________________________________________________________
conv_pw_8 (Conv2D)           (None, None, None, 512)   262144    
_________________________________________________________________
conv_pw_8_bn (BatchNormaliza (None, None, None, 512)   2048      
_________________________________________________________________
conv_pw_8_relu (ReLU)        (None, None, None, 512)   0         
_________________________________________________________________
conv_dw_9 (DepthwiseConv2D)  (None, None, None, 512)   4608      
_________________________________________________________________
conv_dw_9_bn (BatchNormaliza (None, None, None, 512)   2048      
_________________________________________________________________
conv_dw_9_relu (ReLU)        (None, None, None, 512)   0         
_________________________________________________________________
conv_pw_9 (Conv2D)           (None, None, None, 512)   262144    
_________________________________________________________________
conv_pw_9_bn (BatchNormaliza (None, None, None, 512)   2048      
_________________________________________________________________
conv_pw_9_relu (ReLU)        (None, None, None, 512)   0         
_________________________________________________________________
conv_dw_10 (DepthwiseConv2D) (None, None, None, 512)   4608      
_________________________________________________________________
conv_dw_10_bn (BatchNormaliz (None, None, None, 512)   2048      
_________________________________________________________________
conv_dw_10_relu (ReLU)       (None, None, None, 512)   0         
_________________________________________________________________
conv_pw_10 (Conv2D)          (None, None, None, 512)   262144    
_________________________________________________________________
conv_pw_10_bn (BatchNormaliz (None, None, None, 512)   2048      
_________________________________________________________________
conv_pw_10_relu (ReLU)       (None, None, None, 512)   0         
_________________________________________________________________
conv_dw_11 (DepthwiseConv2D) (None, None, None, 512)   4608      
_________________________________________________________________
conv_dw_11_bn (BatchNormaliz (None, None, None, 512)   2048      
_________________________________________________________________
conv_dw_11_relu (ReLU)       (None, None, None, 512)   0         
_________________________________________________________________
conv_pw_11 (Conv2D)          (None, None, None, 512)   262144    
_________________________________________________________________
conv_pw_11_bn (BatchNormaliz (None, None, None, 512)   2048      
_________________________________________________________________
conv_pw_11_relu (ReLU)       (None, None, None, 512)   0         
_________________________________________________________________
conv_pad_12 (ZeroPadding2D)  (None, None, None, 512)   0         
_________________________________________________________________
conv_dw_12 (DepthwiseConv2D) (None, None, None, 512)   4608      
_________________________________________________________________
conv_dw_12_bn (BatchNormaliz (None, None, None, 512)   2048      
_________________________________________________________________
conv_dw_12_relu (ReLU)       (None, None, None, 512)   0         
_________________________________________________________________
conv_pw_12 (Conv2D)          (None, None, None, 1024)  524288    
_________________________________________________________________
conv_pw_12_bn (BatchNormaliz (None, None, None, 1024)  4096      
_________________________________________________________________
conv_pw_12_relu (ReLU)       (None, None, None, 1024)  0         
_________________________________________________________________
conv_dw_13 (DepthwiseConv2D) (None, None, None, 1024)  9216      
_________________________________________________________________
conv_dw_13_bn (BatchNormaliz (None, None, None, 1024)  4096      
_________________________________________________________________
conv_dw_13_relu (ReLU)       (None, None, None, 1024)  0         
_________________________________________________________________
conv_pw_13 (Conv2D)          (None, None, None, 1024)  1048576   
_________________________________________________________________
conv_pw_13_bn (BatchNormaliz (None, None, None, 1024)  4096      
_________________________________________________________________
conv_pw_13_relu (ReLU)       (None, None, None, 1024)  0         
_________________________________________________________________
global_average_pooling2d (Gl (None, 1024)              0         
_________________________________________________________________
dense (Dense)                (None, 64)                65600     
_________________________________________________________________
dense_1 (Dense)              (None, 10)                650       
=================================================================
Total params: 3,295,114
Trainable params: 3,273,226
Non-trainable params: 21,888
_________________________________________________________________
None
<class 'numpy.ndarray'>
10000
key:  3  D[d]:  1000
key:  8  D[d]:  1000
key:  0  D[d]:  1000
key:  6  D[d]:  1000
key:  1  D[d]:  1000
key:  9  D[d]:  1000
key:  5  D[d]:  1000
key:  7  D[d]:  1000
key:  4  D[d]:  1000
key:  2  D[d]:  1000
div_idx:  [3, 1, 8, 5, 6, 0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [8, 2, 6, 1, 7, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [8, 1, 2, 0, 6, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [1, 4, 9, 2, 0, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [4, 5, 1, 3, 2, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [9, 0, 7, 2, 6, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [6, 7, 1, 5, 0, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [1, 4, 9, 7, 3, 6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [1, 2, 6, 7, 3, 0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [4, 9, 1, 7, 3, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [9, 5, 6, 4, 7, 0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [6, 2, 8, 7, 1, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [8, 5, 2, 1, 9, 6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [0, 5, 7, 6, 1, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [3, 1, 2, 0, 7, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [5, 6, 7, 4, 2, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [7, 2, 9, 4, 8, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [2, 1, 3, 8, 0, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [3, 4, 8, 2, 0, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [2, 5, 9, 0, 3, 6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [4, 9, 5, 1, 2, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [0, 7, 9, 4, 8, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [3, 8, 4, 6, 9, 0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [4, 7, 3, 5, 2, 6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [7, 6, 4, 9, 3, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [7, 1, 3, 6, 0, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [6, 0, 7, 9, 1, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [2, 0, 3, 4, 6, 7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [4, 2, 7, 3, 1, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [6, 0, 8, 3, 5, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
<class 'numpy.ndarray'>
10000
key:  3  D[d]:  1000
key:  8  D[d]:  1000
key:  0  D[d]:  1000
key:  6  D[d]:  1000
key:  1  D[d]:  1000
key:  9  D[d]:  1000
key:  5  D[d]:  1000
key:  7  D[d]:  1000
key:  4  D[d]:  1000
key:  2  D[d]:  1000
div_idx:  [3, 1, 7, 5, 8, 0]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (996, 69786)
div_idx:  [8, 3, 6, 5, 7, 4]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (996, 69786)
div_idx:  [0, 4, 7, 5, 8, 2]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (996, 69786)
div_idx:  [9, 3, 2, 1, 8, 7]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (996, 69786)
div_idx:  [2, 9, 4, 7, 0, 3]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (996, 69786)
div_idx:  [4, 0, 5, 2, 8, 9]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (996, 69786)
div_idx:  [6, 1, 3, 8, 7, 0]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (996, 69786)
div_idx:  [7, 5, 3, 8, 1, 4]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (996, 69786)
div_idx:  [7, 4, 1, 2, 9, 6]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (996, 69786)
div_idx:  [0, 5, 7, 3, 1, 4]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (996, 69786)
div_idx:  [4, 8, 5, 0, 7, 1]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (996, 69786)
div_idx:  [4, 5, 8, 1, 0, 6]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (996, 69786)
div_idx:  [5, 2, 6, 9, 7, 0]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (996, 69786)
div_idx:  [7, 1, 8, 2, 3, 9]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (996, 69786)
div_idx:  [2, 7, 0, 6, 4, 5]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (996, 69786)
div_idx:  [2, 7, 6, 9, 0, 5]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (996, 69786)
div_idx:  [3, 0, 6, 9, 7, 8]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (996, 69786)
div_idx:  [6, 1, 0, 4, 9, 7]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (996, 69786)
div_idx:  [2, 7, 4, 5, 1, 0]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (996, 69786)
div_idx:  [9, 0, 6, 5, 2, 3]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (996, 69786)
div_idx:  [4, 2, 6, 3, 8, 1]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (996, 69786)
div_idx:  [7, 8, 0, 3, 2, 1]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (996, 69786)
div_idx:  [1, 2, 3, 6, 9, 4]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (996, 69786)
div_idx:  [7, 5, 0, 4, 3, 9]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (996, 69786)
div_idx:  [6, 4, 7, 1, 5, 9]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (996, 69786)
div_idx:  [2, 3, 1, 0, 8, 4]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (996, 69786)
div_idx:  [6, 9, 3, 7, 4, 2]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (996, 69786)
div_idx:  [8, 5, 0, 6, 7, 1]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (996, 69786)
div_idx:  [8, 0, 1, 6, 5, 2]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (996, 69786)
div_idx:  [0, 1, 9, 4, 8, 7]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (996, 69786)
<class 'numpy.ndarray'>
10000
key:  3  D[d]:  1000
key:  8  D[d]:  1000
key:  0  D[d]:  1000
key:  6  D[d]:  1000
key:  1  D[d]:  1000
key:  9  D[d]:  1000
key:  5  D[d]:  1000
key:  7  D[d]:  1000
key:  4  D[d]:  1000
key:  2  D[d]:  1000
div_idx:  [4, 8, 3, 7, 5, 6]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (996, 348930)
div_idx:  [1, 2, 4, 9, 8, 5]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (996, 348930)
div_idx:  [8, 0, 4, 2, 5, 6]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (996, 348930)
div_idx:  [1, 0, 7, 3, 9, 6]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (996, 348930)
div_idx:  [8, 0, 7, 5, 9, 2]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (996, 348930)
div_idx:  [4, 2, 3, 1, 9, 0]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (996, 348930)
div_idx:  [2, 1, 8, 7, 4, 3]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (996, 348930)
div_idx:  [4, 3, 9, 6, 5, 2]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (996, 348930)
div_idx:  [7, 8, 9, 6, 0, 1]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (996, 348930)
div_idx:  [5, 6, 2, 4, 0, 8]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (996, 348930)
div_idx:  [9, 4, 7, 1, 2, 0]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (996, 348930)
div_idx:  [9, 1, 6, 7, 2, 4]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (996, 348930)
div_idx:  [9, 5, 1, 0, 7, 6]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (996, 348930)
div_idx:  [9, 8, 3, 2, 6, 1]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (996, 348930)
div_idx:  [1, 3, 6, 9, 5, 8]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (996, 348930)
div_idx:  [9, 8, 4, 0, 5, 6]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (996, 348930)
div_idx:  [9, 7, 0, 2, 1, 3]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (996, 348930)
div_idx:  [5, 1, 2, 3, 0, 4]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (996, 348930)
div_idx:  [5, 3, 2, 1, 0, 4]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (996, 348930)
div_idx:  [9, 8, 2, 3, 4, 6]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (996, 348930)
div_idx:  [8, 7, 2, 5, 3, 4]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (996, 348930)
div_idx:  [0, 9, 3, 5, 2, 7]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (996, 348930)
div_idx:  [6, 5, 4, 3, 1, 7]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (996, 348930)
div_idx:  [2, 3, 5, 0, 9, 4]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (996, 348930)
div_idx:  [9, 3, 2, 5, 6, 0]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (996, 348930)
div_idx:  [2, 1, 9, 5, 4, 8]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (996, 348930)
div_idx:  [3, 4, 1, 8, 2, 6]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (996, 348930)
div_idx:  [3, 7, 1, 5, 6, 0]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (996, 348930)
div_idx:  [8, 6, 5, 3, 4, 2]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (996, 348930)
div_idx:  [4, 9, 2, 3, 5, 0]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (996, 348930)
<class 'numpy.ndarray'>
10000
key:  3  D[d]:  1000
key:  8  D[d]:  1000
key:  0  D[d]:  1000
key:  6  D[d]:  1000
key:  1  D[d]:  1000
key:  9  D[d]:  1000
key:  5  D[d]:  1000
key:  7  D[d]:  1000
key:  4  D[d]:  1000
key:  2  D[d]:  1000
div_idx:  [7, 1, 3, 9, 6, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [8, 0, 5, 1, 2, 6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [2, 0, 5, 8, 7, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [2, 0, 3, 4, 9, 6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [0, 6, 7, 5, 3, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [3, 1, 7, 8, 2, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [2, 9, 3, 8, 5, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [4, 2, 9, 0, 6, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [2, 1, 4, 0, 5, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [8, 0, 7, 6, 1, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [0, 4, 3, 6, 5, 7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [8, 2, 5, 9, 4, 6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [2, 0, 8, 4, 5, 7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [7, 1, 6, 0, 5, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [2, 6, 8, 7, 5, 0]/home/zhiyu/DeepSuite/adversarial/adv_function/trace.py:107: RuntimeWarning: invalid value encountered in true_divide
  neuron_value = (neuron_value - traces_low[i]) / unit[i]

test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [4, 5, 8, 3, 1, 0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [5, 3, 8, 6, 1, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [9, 0, 8, 7, 1, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [5, 0, 7, 1, 8, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [4, 8, 3, 1, 0, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [4, 8, 9, 2, 0, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [8, 5, 7, 6, 0, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [8, 6, 5, 2, 9, 7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [4, 1, 9, 0, 8, 6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [2, 0, 3, 4, 9, 6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [3, 6, 1, 0, 9, 7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [8, 2, 0, 3, 7, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [4, 2, 1, 6, 3, 7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [2, 1, 3, 6, 7, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [6, 4, 2, 0, 9, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
<class 'numpy.ndarray'>
10000
key:  3  D[d]:  1000
key:  8  D[d]:  1000
key:  0  D[d]:  1000
key:  6  D[d]:  1000
key:  1  D[d]:  1000
key:  9  D[d]:  1000
key:  5  D[d]:  1000
key:  7  D[d]:  1000
key:  4  D[d]:  1000
key:  2  D[d]:  1000
div_idx:  [2, 0, 6, 4, 8, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [1, 9, 7, 6, 4, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [1, 8, 0, 3, 2, 6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [5, 7, 0, 4, 6, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [1, 4, 0, 6, 2, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [3, 0, 9, 6, 5, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [4, 7, 8, 2, 0, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [2, 0, 9, 1, 6, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [8, 2, 7, 6, 5, 0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [0, 1, 3, 9, 4, 6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [9, 8, 0, 7, 6, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [9, 7, 5, 4, 2, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [2, 4, 6, 8, 9, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [4, 5, 2, 0, 9, 7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [6, 1, 9, 4, 3, 0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [5, 2, 3, 8, 0, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [5, 2, 8, 6, 4, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [9, 2, 3, 6, 0, 7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [8, 0, 5, 6, 3, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [3, 9, 5, 2, 1, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [9, 5, 2, 0, 1, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [1, 7, 9, 4, 6, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [7, 3, 2, 8, 6, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [3, 2, 5, 0, 4, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [1, 7, 6, 9, 5, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [0, 5, 7, 2, 3, 6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [6, 4, 3, 1, 7, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [3, 5, 9, 2, 6, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [5, 9, 7, 1, 2, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
div_idx:  [0, 5, 8, 3, 7, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (996, 34893)
2021-06-30 17:31:18.750497: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcuda.so.1
2021-06-30 17:31:18.762325: E tensorflow/stream_executor/cuda/cuda_driver.cc:313] failed call to cuInit: CUDA_ERROR_NO_DEVICE: no CUDA-capable device is detected
2021-06-30 17:31:18.762380: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:169] retrieving CUDA diagnostic information for host: dell-PowerEdge-R940xa
2021-06-30 17:31:18.762387: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:176] hostname: dell-PowerEdge-R940xa
2021-06-30 17:31:18.762533: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:200] libcuda reported version is: 440.44.0
2021-06-30 17:31:18.762556: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:204] kernel reported version is: 440.44.0
2021-06-30 17:31:18.762562: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:310] kernel version seems to match DSO: 440.44.0
2021-06-30 17:31:18.762760: I tensorflow/core/platform/cpu_feature_guard.cc:143] Your CPU supports instructions that this TensorFlow binary was not compiled to use: SSE4.1 SSE4.2 AVX AVX2 AVX512F FMA
2021-06-30 17:31:18.798172: I tensorflow/core/platform/profile_utils/cpu_utils.cc:102] CPU Frequency: 2600000000 Hz
2021-06-30 17:31:18.805290: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0x55b8421bc3f0 initialized for platform Host (this does not guarantee that XLA will be used). Devices:
2021-06-30 17:31:18.805327: I tensorflow/compiler/xla/service/service.cc:176]   StreamExecutor device (0): Host, Default Version
Namespace(batch_size=1024, dataset='cifar10', each_div=142, idc_layer='all', idc_n=6, iterations=30, k_kmnc=10, k_nc=0.75, k_tknc=1, model='MobileNet', num_div=7, ood_dataset='SUN', path='/media/data1/DeepSuite/', pool_iter=1000, pool_type='test', sa_layer=-1, sa_n=1000, save_path='/media/data1/DeepSuite', wrong_rate=0.1)
load MobileNet...
/media/data1/DeepSuite/trained_models/cifar10/MobileNet.h5
Model: "model"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
input_2 (InputLayer)         [(None, None, None, 3)]   0         
_________________________________________________________________
conv1_pad (ZeroPadding2D)    (None, None, None, 3)     0         
_________________________________________________________________
conv1 (Conv2D)               (None, None, None, 32)    864       
_________________________________________________________________
conv1_bn (BatchNormalization (None, None, None, 32)    128       
_________________________________________________________________
conv1_relu (ReLU)            (None, None, None, 32)    0         
_________________________________________________________________
conv_dw_1 (DepthwiseConv2D)  (None, None, None, 32)    288       
_________________________________________________________________
conv_dw_1_bn (BatchNormaliza (None, None, None, 32)    128       
_________________________________________________________________
conv_dw_1_relu (ReLU)        (None, None, None, 32)    0         
_________________________________________________________________
conv_pw_1 (Conv2D)           (None, None, None, 64)    2048      
_________________________________________________________________
conv_pw_1_bn (BatchNormaliza (None, None, None, 64)    256       
_________________________________________________________________
conv_pw_1_relu (ReLU)        (None, None, None, 64)    0         
_________________________________________________________________
conv_pad_2 (ZeroPadding2D)   (None, None, None, 64)    0         
_________________________________________________________________
conv_dw_2 (DepthwiseConv2D)  (None, None, None, 64)    576       
_________________________________________________________________
conv_dw_2_bn (BatchNormaliza (None, None, None, 64)    256       
_________________________________________________________________
conv_dw_2_relu (ReLU)        (None, None, None, 64)    0         
_________________________________________________________________
conv_pw_2 (Conv2D)           (None, None, None, 128)   8192      
_________________________________________________________________
conv_pw_2_bn (BatchNormaliza (None, None, None, 128)   512       
_________________________________________________________________
conv_pw_2_relu (ReLU)        (None, None, None, 128)   0         
_________________________________________________________________
conv_dw_3 (DepthwiseConv2D)  (None, None, None, 128)   1152      
_________________________________________________________________
conv_dw_3_bn (BatchNormaliza (None, None, None, 128)   512       
_________________________________________________________________
conv_dw_3_relu (ReLU)        (None, None, None, 128)   0         
_________________________________________________________________
conv_pw_3 (Conv2D)           (None, None, None, 128)   16384     
_________________________________________________________________
conv_pw_3_bn (BatchNormaliza (None, None, None, 128)   512       
_________________________________________________________________
conv_pw_3_relu (ReLU)        (None, None, None, 128)   0         
_________________________________________________________________
conv_pad_4 (ZeroPadding2D)   (None, None, None, 128)   0         
_________________________________________________________________
conv_dw_4 (DepthwiseConv2D)  (None, None, None, 128)   1152      
_________________________________________________________________
conv_dw_4_bn (BatchNormaliza (None, None, None, 128)   512       
_________________________________________________________________
conv_dw_4_relu (ReLU)        (None, None, None, 128)   0         
_________________________________________________________________
conv_pw_4 (Conv2D)           (None, None, None, 256)   32768     
_________________________________________________________________
conv_pw_4_bn (BatchNormaliza (None, None, None, 256)   1024      
_________________________________________________________________
conv_pw_4_relu (ReLU)        (None, None, None, 256)   0         
_________________________________________________________________
conv_dw_5 (DepthwiseConv2D)  (None, None, None, 256)   2304      
_________________________________________________________________
conv_dw_5_bn (BatchNormaliza (None, None, None, 256)   1024      
_________________________________________________________________
conv_dw_5_relu (ReLU)        (None, None, None, 256)   0         
_________________________________________________________________
conv_pw_5 (Conv2D)           (None, None, None, 256)   65536     
_________________________________________________________________
conv_pw_5_bn (BatchNormaliza (None, None, None, 256)   1024      
_________________________________________________________________
conv_pw_5_relu (ReLU)        (None, None, None, 256)   0         
_________________________________________________________________
conv_pad_6 (ZeroPadding2D)   (None, None, None, 256)   0         
_________________________________________________________________
conv_dw_6 (DepthwiseConv2D)  (None, None, None, 256)   2304      
_________________________________________________________________
conv_dw_6_bn (BatchNormaliza (None, None, None, 256)   1024      
_________________________________________________________________
conv_dw_6_relu (ReLU)        (None, None, None, 256)   0         
_________________________________________________________________
conv_pw_6 (Conv2D)           (None, None, None, 512)   131072    
_________________________________________________________________
conv_pw_6_bn (BatchNormaliza (None, None, None, 512)   2048      
_________________________________________________________________
conv_pw_6_relu (ReLU)        (None, None, None, 512)   0         
_________________________________________________________________
conv_dw_7 (DepthwiseConv2D)  (None, None, None, 512)   4608      
_________________________________________________________________
conv_dw_7_bn (BatchNormaliza (None, None, None, 512)   2048      
_________________________________________________________________
conv_dw_7_relu (ReLU)        (None, None, None, 512)   0         
_________________________________________________________________
conv_pw_7 (Conv2D)           (None, None, None, 512)   262144    
_________________________________________________________________
conv_pw_7_bn (BatchNormaliza (None, None, None, 512)   2048      
_________________________________________________________________
conv_pw_7_relu (ReLU)        (None, None, None, 512)   0         
_________________________________________________________________
conv_dw_8 (DepthwiseConv2D)  (None, None, None, 512)   4608      
_________________________________________________________________
conv_dw_8_bn (BatchNormaliza (None, None, None, 512)   2048      
_________________________________________________________________
conv_dw_8_relu (ReLU)        (None, None, None, 512)   0         
_________________________________________________________________
conv_pw_8 (Conv2D)           (None, None, None, 512)   262144    
_________________________________________________________________
conv_pw_8_bn (BatchNormaliza (None, None, None, 512)   2048      
_________________________________________________________________
conv_pw_8_relu (ReLU)        (None, None, None, 512)   0         
_________________________________________________________________
conv_dw_9 (DepthwiseConv2D)  (None, None, None, 512)   4608      
_________________________________________________________________
conv_dw_9_bn (BatchNormaliza (None, None, None, 512)   2048      
_________________________________________________________________
conv_dw_9_relu (ReLU)        (None, None, None, 512)   0         
_________________________________________________________________
conv_pw_9 (Conv2D)           (None, None, None, 512)   262144    
_________________________________________________________________
conv_pw_9_bn (BatchNormaliza (None, None, None, 512)   2048      
_________________________________________________________________
conv_pw_9_relu (ReLU)        (None, None, None, 512)   0         
_________________________________________________________________
conv_dw_10 (DepthwiseConv2D) (None, None, None, 512)   4608      
_________________________________________________________________
conv_dw_10_bn (BatchNormaliz (None, None, None, 512)   2048      
_________________________________________________________________
conv_dw_10_relu (ReLU)       (None, None, None, 512)   0         
_________________________________________________________________
conv_pw_10 (Conv2D)          (None, None, None, 512)   262144    
_________________________________________________________________
conv_pw_10_bn (BatchNormaliz (None, None, None, 512)   2048      
_________________________________________________________________
conv_pw_10_relu (ReLU)       (None, None, None, 512)   0         
_________________________________________________________________
conv_dw_11 (DepthwiseConv2D) (None, None, None, 512)   4608      
_________________________________________________________________
conv_dw_11_bn (BatchNormaliz (None, None, None, 512)   2048      
_________________________________________________________________
conv_dw_11_relu (ReLU)       (None, None, None, 512)   0         
_________________________________________________________________
conv_pw_11 (Conv2D)          (None, None, None, 512)   262144    
_________________________________________________________________
conv_pw_11_bn (BatchNormaliz (None, None, None, 512)   2048      
_________________________________________________________________
conv_pw_11_relu (ReLU)       (None, None, None, 512)   0         
_________________________________________________________________
conv_pad_12 (ZeroPadding2D)  (None, None, None, 512)   0         
_________________________________________________________________
conv_dw_12 (DepthwiseConv2D) (None, None, None, 512)   4608      
_________________________________________________________________
conv_dw_12_bn (BatchNormaliz (None, None, None, 512)   2048      
_________________________________________________________________
conv_dw_12_relu (ReLU)       (None, None, None, 512)   0         
_________________________________________________________________
conv_pw_12 (Conv2D)          (None, None, None, 1024)  524288    
_________________________________________________________________
conv_pw_12_bn (BatchNormaliz (None, None, None, 1024)  4096      
_________________________________________________________________
conv_pw_12_relu (ReLU)       (None, None, None, 1024)  0         
_________________________________________________________________
conv_dw_13 (DepthwiseConv2D) (None, None, None, 1024)  9216      
_________________________________________________________________
conv_dw_13_bn (BatchNormaliz (None, None, None, 1024)  4096      
_________________________________________________________________
conv_dw_13_relu (ReLU)       (None, None, None, 1024)  0         
_________________________________________________________________
conv_pw_13 (Conv2D)          (None, None, None, 1024)  1048576   
_________________________________________________________________
conv_pw_13_bn (BatchNormaliz (None, None, None, 1024)  4096      
_________________________________________________________________
conv_pw_13_relu (ReLU)       (None, None, None, 1024)  0         
_________________________________________________________________
global_average_pooling2d (Gl (None, 1024)              0         
_________________________________________________________________
dense (Dense)                (None, 64)                65600     
_________________________________________________________________
dense_1 (Dense)              (None, 10)                650       
=================================================================
Total params: 3,295,114
Trainable params: 3,273,226
Non-trainable params: 21,888
_________________________________________________________________
None
<class 'numpy.ndarray'>
10000
key:  3  D[d]:  1000
key:  8  D[d]:  1000
key:  0  D[d]:  1000
key:  6  D[d]:  1000
key:  1  D[d]:  1000
key:  9  D[d]:  1000
key:  5  D[d]:  1000
key:  7  D[d]:  1000
key:  4  D[d]:  1000
key:  2  D[d]:  1000
div_idx:  [3, 1, 8, 5, 6, 0, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [8, 7, 9, 5, 6, 2, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [4, 6, 9, 7, 8, 5, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [9, 2, 6, 7, 0, 1, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [7, 5, 8, 3, 0, 6, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [0, 1, 9, 5, 2, 6, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [5, 3, 9, 1, 7, 0, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [3, 9, 0, 5, 1, 7, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [9, 5, 4, 7, 1, 6, 0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [2, 4, 0, 9, 3, 8, 7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [4, 1, 2, 9, 6, 7, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [0, 5, 1, 9, 4, 2, 6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [1, 2, 8, 7, 3, 4, 6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [2, 3, 5, 4, 8, 6, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [4, 0, 1, 3, 8, 9, 6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [6, 2, 4, 5, 0, 7, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [4, 6, 9, 2, 1, 8, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [2, 4, 9, 0, 3, 5, 7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [6, 1, 0, 7, 5, 2, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [7, 9, 8, 4, 1, 3, 0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [2, 4, 6, 5, 8, 1, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [0, 2, 6, 1, 3, 8, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [3, 0, 7, 9, 5, 4, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [8, 0, 9, 4, 6, 2, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [8, 3, 6, 2, 1, 4, 7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [5, 6, 4, 8, 0, 1, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [3, 1, 8, 6, 4, 9, 0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [2, 0, 3, 1, 4, 8, 6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [0, 8, 1, 7, 6, 3, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [7, 6, 4, 3, 5, 1, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
<class 'numpy.ndarray'>
10000
key:  3  D[d]:  1000
key:  8  D[d]:  1000
key:  0  D[d]:  1000
key:  6  D[d]:  1000
key:  1  D[d]:  1000
key:  9  D[d]:  1000
key:  5  D[d]:  1000
key:  7  D[d]:  1000
key:  4  D[d]:  1000
key:  2  D[d]:  1000
div_idx:  [0, 8, 3, 6, 2, 7, 1]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (994, 69786)
div_idx:  [8, 9, 1, 6, 5, 3, 2]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (994, 69786)
div_idx:  [4, 9, 7, 5, 3, 1, 6]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (994, 69786)
div_idx:  [1, 9, 8, 4, 3, 0, 7]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (994, 69786)
div_idx:  [4, 5, 6, 9, 2, 0, 1]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (994, 69786)
div_idx:  [7, 5, 0, 2, 6, 3, 9]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (994, 69786)
div_idx:  [3, 5, 0, 7, 2, 8, 1]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (994, 69786)
div_idx:  [6, 0, 9, 8, 3, 1, 4]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (994, 69786)
div_idx:  [7, 6, 8, 9, 5, 4, 0]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (994, 69786)
div_idx:  [9, 7, 4, 1, 3, 6, 5]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (994, 69786)
div_idx:  [8, 1, 6, 9, 0, 5, 2]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (994, 69786)
div_idx:  [9, 0, 5, 3, 1, 4, 8]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (994, 69786)
div_idx:  [4, 2, 7, 1, 9, 5, 8]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (994, 69786)
div_idx:  [7, 9, 4, 3, 6, 0, 2]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (994, 69786)
div_idx:  [3, 7, 5, 9, 6, 2, 8]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (994, 69786)
div_idx:  [8, 7, 1, 4, 2, 3, 9]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (994, 69786)
div_idx:  [6, 8, 5, 0, 7, 4, 2]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (994, 69786)
div_idx:  [3, 4, 5, 7, 9, 8, 1]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (994, 69786)
div_idx:  [8, 9, 1, 3, 6, 2, 7]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (994, 69786)
div_idx:  [9, 5, 1, 6, 3, 4, 2]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (994, 69786)
div_idx:  [8, 0, 5, 6, 9, 3, 2]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (994, 69786)
div_idx:  [3, 1, 7, 8, 4, 2, 6]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (994, 69786)
div_idx:  [1, 9, 2, 8, 5, 6, 4]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (994, 69786)
div_idx:  [2, 0, 1, 3, 4, 6, 9]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (994, 69786)
div_idx:  [6, 5, 8, 7, 4, 0, 1]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (994, 69786)
div_idx:  [6, 2, 9, 4, 3, 7, 1]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (994, 69786)
div_idx:  [0, 6, 9, 8, 2, 5, 7]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (994, 69786)
div_idx:  [2, 3, 5, 4, 0, 6, 9]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (994, 69786)
div_idx:  [5, 1, 8, 0, 9, 4, 7]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (994, 69786)
div_idx:  [9, 0, 3, 5, 4, 6, 7]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (994, 69786)
<class 'numpy.ndarray'>
10000
key:  3  D[d]:  1000
key:  8  D[d]:  1000
key:  0  D[d]:  1000
key:  6  D[d]:  1000
key:  1  D[d]:  1000
key:  9  D[d]:  1000
key:  5  D[d]:  1000
key:  7  D[d]:  1000
key:  4  D[d]:  1000
key:  2  D[d]:  1000
div_idx:  [8, 0, 3, 9, 1, 4, 6]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (994, 348930)
div_idx:  [0, 2, 3, 7, 4, 1, 8]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (994, 348930)
div_idx:  [4, 6, 3, 5, 2, 0, 7]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (994, 348930)
div_idx:  [6, 2, 3, 5, 4, 1, 7]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (994, 348930)
div_idx:  [8, 6, 3, 1, 5, 4, 0]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (994, 348930)
div_idx:  [3, 5, 2, 7, 4, 0, 6]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (994, 348930)
div_idx:  [9, 4, 3, 0, 1, 6, 5]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (994, 348930)
div_idx:  [2, 8, 5, 6, 3, 0, 4]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (994, 348930)
div_idx:  [6, 1, 5, 2, 7, 3, 0]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (994, 348930)
div_idx:  [0, 7, 3, 5, 9, 1, 4]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (994, 348930)
div_idx:  [3, 5, 4, 8, 1, 6, 9]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (994, 348930)
div_idx:  [1, 3, 9, 4, 8, 0, 6]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (994, 348930)
div_idx:  [6, 4, 0, 5, 3, 7, 8]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (994, 348930)
div_idx:  [3, 7, 4, 6, 0, 9, 2]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (994, 348930)
div_idx:  [8, 7, 4, 2, 1, 9, 3]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (994, 348930)
div_idx:  [5, 8, 7, 0, 9, 2, 4]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (994, 348930)
div_idx:  [3, 5, 0, 1, 8, 6, 7]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (994, 348930)
div_idx:  [0, 5, 6, 4, 7, 9, 1]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (994, 348930)
div_idx:  [6, 2, 4, 0, 9, 3, 1]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (994, 348930)
div_idx:  [8, 2, 4, 1, 3, 0, 9]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (994, 348930)
div_idx:  [1, 4, 9, 3, 2, 0, 5]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (994, 348930)
div_idx:  [5, 8, 3, 7, 9, 6, 2]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (994, 348930)
div_idx:  [3, 4, 2, 0, 6, 1, 8]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (994, 348930)
div_idx:  [8, 0, 4, 2, 9, 6, 3]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (994, 348930)
div_idx:  [0, 4, 2, 9, 6, 5, 8]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (994, 348930)
div_idx:  [1, 7, 5, 6, 8, 9, 0]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (994, 348930)
div_idx:  [2, 0, 8, 3, 4, 6, 1]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (994, 348930)
div_idx:  [4, 7, 0, 9, 2, 3, 8]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (994, 348930)
div_idx:  [7, 6, 2, 1, 9, 0, 8]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (994, 348930)
div_idx:  [1, 4, 3, 2, 0, 7, 9]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (994, 348930)
<class 'numpy.ndarray'>
10000
key:  3  D[d]:  1000
key:  8  D[d]:  1000
key:  0  D[d]:  1000
key:  6  D[d]:  1000
key:  1  D[d]:  1000
key:  9  D[d]:  1000
key:  5  D[d]:  1000
key:  7  D[d]:  1000
key:  4  D[d]:  1000
key:  2  D[d]:  1000
div_idx:  [4, 1, 9, 7, 0, 6, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [6, 1, 4, 8, 5, 2, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [9, 4, 8, 6, 3, 5, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [4, 7, 1, 8, 0, 2, 6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [8, 7, 6, 0, 9, 3, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [4, 5, 1, 6, 0, 8, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [3, 5, 2, 8, 1, 6, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [1, 6, 7, 0, 3, 2, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [2, 5, 6, 3, 8, 4, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [8, 7, 9, 4, 1, 0, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [1, 3, 7, 9, 4, 0, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [4, 7, 9, 8, 1, 2, 5]/home/zhiyu/DeepSuite/adversarial/adv_function/trace.py:107: RuntimeWarning: invalid value encountered in true_divide
  neuron_value = (neuron_value - traces_low[i]) / unit[i]

test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [6, 0, 8, 2, 7, 1, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [8, 4, 6, 3, 1, 0, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [7, 5, 0, 3, 8, 2, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [5, 3, 4, 7, 2, 9, 0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [9, 1, 2, 4, 5, 8, 0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [8, 5, 4, 6, 2, 9, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [3, 9, 4, 0, 8, 5, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [9, 2, 3, 0, 7, 4, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [6, 5, 8, 9, 2, 0, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [0, 5, 6, 4, 9, 1, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [4, 6, 3, 0, 7, 9, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [0, 9, 4, 8, 7, 2, 6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [7, 4, 9, 3, 2, 0, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [1, 4, 8, 7, 2, 5, 6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [5, 4, 7, 0, 2, 8, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [9, 6, 3, 8, 5, 7, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [6, 4, 8, 5, 1, 2, 7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [6, 4, 1, 0, 2, 7, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
<class 'numpy.ndarray'>
10000
key:  3  D[d]:  1000
key:  8  D[d]:  1000
key:  0  D[d]:  1000
key:  6  D[d]:  1000
key:  1  D[d]:  1000
key:  9  D[d]:  1000
key:  5  D[d]:  1000
key:  7  D[d]:  1000
key:  4  D[d]:  1000
key:  2  D[d]:  1000
div_idx:  [5, 3, 7, 9, 0, 6, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [5, 2, 7, 9, 4, 6, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [2, 1, 7, 0, 9, 8, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [5, 0, 1, 8, 7, 6, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [2, 6, 0, 9, 7, 5, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [0, 3, 4, 7, 1, 9, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [3, 2, 5, 8, 0, 7, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [4, 5, 6, 8, 9, 0, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [9, 5, 2, 8, 6, 1, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [4, 5, 7, 2, 0, 1, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [0, 2, 8, 6, 1, 4, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [1, 3, 7, 0, 5, 8, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [3, 7, 8, 9, 5, 2, 0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [5, 3, 0, 9, 1, 2, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [5, 0, 8, 7, 4, 1, 6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [8, 4, 3, 2, 1, 7, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [0, 7, 5, 3, 2, 8, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [5, 4, 3, 0, 2, 9, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [2, 3, 0, 1, 5, 4, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [9, 4, 0, 3, 7, 8, 6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [9, 0, 1, 6, 8, 3, 7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [9, 5, 1, 8, 7, 2, 6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [0, 8, 2, 5, 9, 7, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [8, 2, 5, 0, 4, 9, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [1, 4, 6, 0, 9, 3, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [2, 6, 7, 0, 8, 4, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [3, 0, 9, 5, 7, 1, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [2, 0, 3, 8, 6, 1, 7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [9, 6, 3, 1, 7, 4, 0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
div_idx:  [5, 0, 4, 8, 3, 7, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (994, 34893)
2021-06-30 17:35:02.886979: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcuda.so.1
2021-06-30 17:35:02.898904: E tensorflow/stream_executor/cuda/cuda_driver.cc:313] failed call to cuInit: CUDA_ERROR_NO_DEVICE: no CUDA-capable device is detected
2021-06-30 17:35:02.898952: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:169] retrieving CUDA diagnostic information for host: dell-PowerEdge-R940xa
2021-06-30 17:35:02.898959: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:176] hostname: dell-PowerEdge-R940xa
2021-06-30 17:35:02.899099: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:200] libcuda reported version is: 440.44.0
2021-06-30 17:35:02.899121: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:204] kernel reported version is: 440.44.0
2021-06-30 17:35:02.899126: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:310] kernel version seems to match DSO: 440.44.0
2021-06-30 17:35:02.899351: I tensorflow/core/platform/cpu_feature_guard.cc:143] Your CPU supports instructions that this TensorFlow binary was not compiled to use: SSE4.1 SSE4.2 AVX AVX2 AVX512F FMA
2021-06-30 17:35:02.934292: I tensorflow/core/platform/profile_utils/cpu_utils.cc:102] CPU Frequency: 2600000000 Hz
2021-06-30 17:35:02.944771: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0x5599d4bd79b0 initialized for platform Host (this does not guarantee that XLA will be used). Devices:
2021-06-30 17:35:02.944839: I tensorflow/compiler/xla/service/service.cc:176]   StreamExecutor device (0): Host, Default Version
Namespace(batch_size=1024, dataset='cifar10', each_div=125, idc_layer='all', idc_n=6, iterations=30, k_kmnc=10, k_nc=0.75, k_tknc=1, model='MobileNet', num_div=8, ood_dataset='SUN', path='/media/data1/DeepSuite/', pool_iter=1000, pool_type='test', sa_layer=-1, sa_n=1000, save_path='/media/data1/DeepSuite', wrong_rate=0.1)
load MobileNet...
/media/data1/DeepSuite/trained_models/cifar10/MobileNet.h5
Model: "model"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
input_2 (InputLayer)         [(None, None, None, 3)]   0         
_________________________________________________________________
conv1_pad (ZeroPadding2D)    (None, None, None, 3)     0         
_________________________________________________________________
conv1 (Conv2D)               (None, None, None, 32)    864       
_________________________________________________________________
conv1_bn (BatchNormalization (None, None, None, 32)    128       
_________________________________________________________________
conv1_relu (ReLU)            (None, None, None, 32)    0         
_________________________________________________________________
conv_dw_1 (DepthwiseConv2D)  (None, None, None, 32)    288       
_________________________________________________________________
conv_dw_1_bn (BatchNormaliza (None, None, None, 32)    128       
_________________________________________________________________
conv_dw_1_relu (ReLU)        (None, None, None, 32)    0         
_________________________________________________________________
conv_pw_1 (Conv2D)           (None, None, None, 64)    2048      
_________________________________________________________________
conv_pw_1_bn (BatchNormaliza (None, None, None, 64)    256       
_________________________________________________________________
conv_pw_1_relu (ReLU)        (None, None, None, 64)    0         
_________________________________________________________________
conv_pad_2 (ZeroPadding2D)   (None, None, None, 64)    0         
_________________________________________________________________
conv_dw_2 (DepthwiseConv2D)  (None, None, None, 64)    576       
_________________________________________________________________
conv_dw_2_bn (BatchNormaliza (None, None, None, 64)    256       
_________________________________________________________________
conv_dw_2_relu (ReLU)        (None, None, None, 64)    0         
_________________________________________________________________
conv_pw_2 (Conv2D)           (None, None, None, 128)   8192      
_________________________________________________________________
conv_pw_2_bn (BatchNormaliza (None, None, None, 128)   512       
_________________________________________________________________
conv_pw_2_relu (ReLU)        (None, None, None, 128)   0         
_________________________________________________________________
conv_dw_3 (DepthwiseConv2D)  (None, None, None, 128)   1152      
_________________________________________________________________
conv_dw_3_bn (BatchNormaliza (None, None, None, 128)   512       
_________________________________________________________________
conv_dw_3_relu (ReLU)        (None, None, None, 128)   0         
_________________________________________________________________
conv_pw_3 (Conv2D)           (None, None, None, 128)   16384     
_________________________________________________________________
conv_pw_3_bn (BatchNormaliza (None, None, None, 128)   512       
_________________________________________________________________
conv_pw_3_relu (ReLU)        (None, None, None, 128)   0         
_________________________________________________________________
conv_pad_4 (ZeroPadding2D)   (None, None, None, 128)   0         
_________________________________________________________________
conv_dw_4 (DepthwiseConv2D)  (None, None, None, 128)   1152      
_________________________________________________________________
conv_dw_4_bn (BatchNormaliza (None, None, None, 128)   512       
_________________________________________________________________
conv_dw_4_relu (ReLU)        (None, None, None, 128)   0         
_________________________________________________________________
conv_pw_4 (Conv2D)           (None, None, None, 256)   32768     
_________________________________________________________________
conv_pw_4_bn (BatchNormaliza (None, None, None, 256)   1024      
_________________________________________________________________
conv_pw_4_relu (ReLU)        (None, None, None, 256)   0         
_________________________________________________________________
conv_dw_5 (DepthwiseConv2D)  (None, None, None, 256)   2304      
_________________________________________________________________
conv_dw_5_bn (BatchNormaliza (None, None, None, 256)   1024      
_________________________________________________________________
conv_dw_5_relu (ReLU)        (None, None, None, 256)   0         
_________________________________________________________________
conv_pw_5 (Conv2D)           (None, None, None, 256)   65536     
_________________________________________________________________
conv_pw_5_bn (BatchNormaliza (None, None, None, 256)   1024      
_________________________________________________________________
conv_pw_5_relu (ReLU)        (None, None, None, 256)   0         
_________________________________________________________________
conv_pad_6 (ZeroPadding2D)   (None, None, None, 256)   0         
_________________________________________________________________
conv_dw_6 (DepthwiseConv2D)  (None, None, None, 256)   2304      
_________________________________________________________________
conv_dw_6_bn (BatchNormaliza (None, None, None, 256)   1024      
_________________________________________________________________
conv_dw_6_relu (ReLU)        (None, None, None, 256)   0         
_________________________________________________________________
conv_pw_6 (Conv2D)           (None, None, None, 512)   131072    
_________________________________________________________________
conv_pw_6_bn (BatchNormaliza (None, None, None, 512)   2048      
_________________________________________________________________
conv_pw_6_relu (ReLU)        (None, None, None, 512)   0         
_________________________________________________________________
conv_dw_7 (DepthwiseConv2D)  (None, None, None, 512)   4608      
_________________________________________________________________
conv_dw_7_bn (BatchNormaliza (None, None, None, 512)   2048      
_________________________________________________________________
conv_dw_7_relu (ReLU)        (None, None, None, 512)   0         
_________________________________________________________________
conv_pw_7 (Conv2D)           (None, None, None, 512)   262144    
_________________________________________________________________
conv_pw_7_bn (BatchNormaliza (None, None, None, 512)   2048      
_________________________________________________________________
conv_pw_7_relu (ReLU)        (None, None, None, 512)   0         
_________________________________________________________________
conv_dw_8 (DepthwiseConv2D)  (None, None, None, 512)   4608      
_________________________________________________________________
conv_dw_8_bn (BatchNormaliza (None, None, None, 512)   2048      
_________________________________________________________________
conv_dw_8_relu (ReLU)        (None, None, None, 512)   0         
_________________________________________________________________
conv_pw_8 (Conv2D)           (None, None, None, 512)   262144    
_________________________________________________________________
conv_pw_8_bn (BatchNormaliza (None, None, None, 512)   2048      
_________________________________________________________________
conv_pw_8_relu (ReLU)        (None, None, None, 512)   0         
_________________________________________________________________
conv_dw_9 (DepthwiseConv2D)  (None, None, None, 512)   4608      
_________________________________________________________________
conv_dw_9_bn (BatchNormaliza (None, None, None, 512)   2048      
_________________________________________________________________
conv_dw_9_relu (ReLU)        (None, None, None, 512)   0         
_________________________________________________________________
conv_pw_9 (Conv2D)           (None, None, None, 512)   262144    
_________________________________________________________________
conv_pw_9_bn (BatchNormaliza (None, None, None, 512)   2048      
_________________________________________________________________
conv_pw_9_relu (ReLU)        (None, None, None, 512)   0         
_________________________________________________________________
conv_dw_10 (DepthwiseConv2D) (None, None, None, 512)   4608      
_________________________________________________________________
conv_dw_10_bn (BatchNormaliz (None, None, None, 512)   2048      
_________________________________________________________________
conv_dw_10_relu (ReLU)       (None, None, None, 512)   0         
_________________________________________________________________
conv_pw_10 (Conv2D)          (None, None, None, 512)   262144    
_________________________________________________________________
conv_pw_10_bn (BatchNormaliz (None, None, None, 512)   2048      
_________________________________________________________________
conv_pw_10_relu (ReLU)       (None, None, None, 512)   0         
_________________________________________________________________
conv_dw_11 (DepthwiseConv2D) (None, None, None, 512)   4608      
_________________________________________________________________
conv_dw_11_bn (BatchNormaliz (None, None, None, 512)   2048      
_________________________________________________________________
conv_dw_11_relu (ReLU)       (None, None, None, 512)   0         
_________________________________________________________________
conv_pw_11 (Conv2D)          (None, None, None, 512)   262144    
_________________________________________________________________
conv_pw_11_bn (BatchNormaliz (None, None, None, 512)   2048      
_________________________________________________________________
conv_pw_11_relu (ReLU)       (None, None, None, 512)   0         
_________________________________________________________________
conv_pad_12 (ZeroPadding2D)  (None, None, None, 512)   0         
_________________________________________________________________
conv_dw_12 (DepthwiseConv2D) (None, None, None, 512)   4608      
_________________________________________________________________
conv_dw_12_bn (BatchNormaliz (None, None, None, 512)   2048      
_________________________________________________________________
conv_dw_12_relu (ReLU)       (None, None, None, 512)   0         
_________________________________________________________________
conv_pw_12 (Conv2D)          (None, None, None, 1024)  524288    
_________________________________________________________________
conv_pw_12_bn (BatchNormaliz (None, None, None, 1024)  4096      
_________________________________________________________________
conv_pw_12_relu (ReLU)       (None, None, None, 1024)  0         
_________________________________________________________________
conv_dw_13 (DepthwiseConv2D) (None, None, None, 1024)  9216      
_________________________________________________________________
conv_dw_13_bn (BatchNormaliz (None, None, None, 1024)  4096      
_________________________________________________________________
conv_dw_13_relu (ReLU)       (None, None, None, 1024)  0         
_________________________________________________________________
conv_pw_13 (Conv2D)          (None, None, None, 1024)  1048576   
_________________________________________________________________
conv_pw_13_bn (BatchNormaliz (None, None, None, 1024)  4096      
_________________________________________________________________
conv_pw_13_relu (ReLU)       (None, None, None, 1024)  0         
_________________________________________________________________
global_average_pooling2d (Gl (None, 1024)              0         
_________________________________________________________________
dense (Dense)                (None, 64)                65600     
_________________________________________________________________
dense_1 (Dense)              (None, 10)                650       
=================================================================
Total params: 3,295,114
Trainable params: 3,273,226
Non-trainable params: 21,888
_________________________________________________________________
None
<class 'numpy.ndarray'>
10000
key:  3  D[d]:  1000
key:  8  D[d]:  1000
key:  0  D[d]:  1000
key:  6  D[d]:  1000
key:  1  D[d]:  1000
key:  9  D[d]:  1000
key:  5  D[d]:  1000
key:  7  D[d]:  1000
key:  4  D[d]:  1000
key:  2  D[d]:  1000
div_idx:  [3, 1, 8, 5, 6, 0, 2, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [1, 4, 9, 8, 5, 3, 0, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [8, 2, 7, 6, 4, 1, 3, 0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [7, 1, 3, 6, 9, 4, 0, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [9, 8, 5, 0, 6, 3, 7, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [6, 7, 2, 4, 0, 3, 9, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [0, 8, 2, 3, 6, 7, 1, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [9, 4, 7, 1, 8, 2, 6, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [5, 0, 9, 3, 6, 2, 8, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [7, 1, 5, 2, 6, 3, 0, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [8, 6, 0, 9, 1, 2, 7, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [2, 3, 4, 9, 0, 8, 1, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [6, 4, 0, 5, 2, 9, 8, 7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [6, 2, 8, 0, 7, 9, 4, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [8, 5, 6, 3, 2, 9, 4, 0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [9, 4, 2, 5, 6, 3, 1, 0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [8, 7, 5, 4, 9, 2, 1, 0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [5, 8, 4, 2, 0, 3, 7, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [4, 9, 1, 5, 6, 0, 7, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [1, 0, 5, 6, 9, 8, 4, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [4, 2, 0, 7, 5, 6, 9, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [5, 0, 9, 7, 8, 6, 2, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [3, 6, 0, 1, 7, 5, 8, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [3, 8, 7, 9, 0, 1, 6, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [4, 1, 3, 0, 6, 7, 2, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [4, 5, 1, 8, 3, 2, 9, 7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [7, 4, 1, 6, 9, 5, 3, 0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [6, 1, 4, 9, 8, 7, 0, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [3, 6, 4, 5, 9, 1, 2, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [7, 9, 8, 0, 2, 1, 6, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
<class 'numpy.ndarray'>
10000
key:  3  D[d]:  1000
key:  8  D[d]:  1000
key:  0  D[d]:  1000
key:  6  D[d]:  1000
key:  1  D[d]:  1000
key:  9  D[d]:  1000
key:  5  D[d]:  1000
key:  7  D[d]:  1000
key:  4  D[d]:  1000
key:  2  D[d]:  1000
div_idx:  [9, 0, 6, 7, 8, 4, 3, 5]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [1, 7, 9, 0, 3, 8, 2, 4]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [2, 9, 5, 3, 1, 4, 7, 0]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [6, 9, 2, 7, 3, 4, 5, 0]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [3, 4, 1, 5, 8, 7, 0, 6]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [5, 7, 4, 2, 0, 9, 1, 8]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [6, 4, 1, 7, 8, 5, 0, 9]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [1, 6, 7, 4, 8, 2, 5, 0]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [2, 8, 0, 7, 3, 4, 1, 9]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [4, 2, 5, 1, 0, 3, 9, 7]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [2, 1, 0, 6, 8, 4, 3, 7]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [2, 4, 6, 8, 1, 3, 0, 7]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [8, 6, 0, 2, 7, 5, 9, 3]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [0, 4, 7, 9, 3, 5, 8, 6]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [1, 5, 4, 8, 7, 6, 3, 0]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [7, 6, 1, 5, 0, 4, 8, 2]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [7, 8, 0, 1, 5, 6, 9, 2]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [3, 1, 9, 6, 5, 8, 0, 4]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [6, 5, 4, 9, 0, 3, 8, 2]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [1, 2, 5, 9, 7, 4, 6, 8]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [1, 3, 2, 7, 4, 9, 0, 5]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [1, 4, 7, 9, 5, 8, 6, 3]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [5, 3, 1, 4, 8, 7, 2, 9]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [4, 3, 2, 6, 1, 8, 5, 9]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [8, 6, 3, 0, 9, 4, 5, 1]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [1, 3, 0, 2, 7, 8, 5, 9]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [6, 0, 5, 4, 2, 1, 9, 8]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [0, 8, 6, 5, 2, 3, 9, 1]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [4, 8, 5, 0, 6, 2, 7, 3]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [9, 3, 7, 4, 6, 5, 8, 0]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
<class 'numpy.ndarray'>
10000
key:  3  D[d]:  1000
key:  8  D[d]:  1000
key:  0  D[d]:  1000
key:  6  D[d]:  1000
key:  1  D[d]:  1000
key:  9  D[d]:  1000
key:  5  D[d]:  1000
key:  7  D[d]:  1000
key:  4  D[d]:  1000
key:  2  D[d]:  1000
div_idx:  [8, 5, 6, 2, 4, 3, 0, 1]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [5, 3, 6, 7, 1, 2, 8, 0]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [5, 4, 6, 0, 9, 7, 1, 8]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [8, 4, 1, 5, 7, 2, 6, 0]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [1, 2, 0, 8, 7, 6, 4, 5]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [6, 2, 1, 0, 5, 8, 4, 9]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [7, 9, 8, 0, 1, 4, 3, 2]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [3, 9, 7, 5, 2, 4, 0, 6]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [2, 1, 0, 3, 9, 5, 8, 6]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [9, 2, 4, 7, 1, 3, 6, 5]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [4, 5, 1, 0, 6, 3, 8, 9]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [8, 4, 6, 2, 0, 9, 7, 1]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [0, 8, 3, 4, 1, 5, 6, 9]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [4, 8, 0, 1, 3, 6, 7, 5]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [1, 5, 4, 0, 3, 2, 6, 8]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [2, 8, 4, 7, 0, 9, 5, 3]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [8, 2, 7, 4, 5, 9, 1, 6]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [5, 9, 1, 3, 7, 0, 2, 6]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [6, 2, 3, 1, 5, 7, 4, 8]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [0, 2, 5, 4, 8, 3, 6, 1]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [9, 4, 5, 1, 3, 2, 6, 7]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [9, 3, 0, 7, 1, 8, 4, 6]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [6, 5, 4, 7, 9, 0, 2, 1]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [2, 3, 0, 5, 4, 6, 1, 9]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [4, 3, 6, 2, 0, 5, 8, 1]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [4, 2, 6, 0, 1, 7, 3, 8]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [1, 0, 6, 5, 7, 3, 9, 8]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [7, 0, 2, 5, 9, 8, 3, 4]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [2, 7, 1, 3, 9, 0, 6, 4]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [8, 0, 9, 3, 6, 4, 5, 2]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
<class 'numpy.ndarray'>
10000
key:  3  D[d]:  1000
key:  8  D[d]:  1000
key:  0  D[d]:  1000
key:  6  D[d]:  1000
key:  1  D[d]:  1000
key:  9  D[d]:  1000
key:  5  D[d]:  1000
key:  7  D[d]:  1000
key:  4  D[d]:  1000
key:  2  D[d]:  1000
div_idx:  [9, 8, 7, 4, 2, 6, 0, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [7, 5, 8, 0, 3, 4, 6, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [9, 4, 8, 5, 2, 3, 6, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [0, 9, 5, 7, 2, 4, 6, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [4, 0, 1, 5, 3, 6, 2, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [4, 3, 2, 8, 0, 7, 6, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [1, 9, 3, 7, 4, 2, 0, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [5, 9, 8, 4, 1, 0, 2, 3]
test_fitness.shape:  (10000, 34893)/home/zhiyu/DeepSuite/adversarial/adv_function/trace.py:107: RuntimeWarning: invalid value encountered in true_divide
  neuron_value = (neuron_value - traces_low[i]) / unit[i]

size of selected fitness:  (1000, 34893)
div_idx:  [8, 1, 2, 5, 0, 6, 4, 7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [1, 5, 7, 2, 6, 9, 3, 0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [1, 0, 6, 7, 5, 3, 4, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [2, 1, 0, 6, 8, 9, 5, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [6, 5, 2, 9, 7, 1, 3, 0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [0, 2, 8, 3, 4, 5, 9, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [7, 8, 5, 1, 2, 4, 6, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [6, 1, 2, 5, 8, 7, 9, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [5, 3, 9, 0, 2, 7, 4, 6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [4, 5, 1, 8, 0, 9, 6, 7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [8, 0, 4, 2, 3, 5, 1, 7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [6, 0, 9, 8, 2, 5, 3, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [2, 1, 7, 3, 8, 5, 9, 0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [3, 0, 6, 5, 8, 2, 9, 7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [6, 9, 3, 1, 4, 8, 2, 7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [8, 1, 5, 6, 9, 7, 0, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [7, 2, 9, 5, 1, 3, 4, 0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [0, 6, 8, 3, 2, 1, 7, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [8, 5, 9, 2, 6, 7, 3, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [6, 0, 3, 8, 5, 4, 7, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [2, 0, 8, 7, 5, 1, 9, 6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [7, 9, 6, 2, 5, 8, 1, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
<class 'numpy.ndarray'>
10000
key:  3  D[d]:  1000
key:  8  D[d]:  1000
key:  0  D[d]:  1000
key:  6  D[d]:  1000
key:  1  D[d]:  1000
key:  9  D[d]:  1000
key:  5  D[d]:  1000
key:  7  D[d]:  1000
key:  4  D[d]:  1000
key:  2  D[d]:  1000
div_idx:  [6, 1, 2, 0, 7, 9, 4, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [1, 9, 3, 5, 7, 2, 4, 0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [7, 5, 8, 0, 3, 6, 1, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [6, 1, 0, 7, 4, 3, 9, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [8, 3, 0, 6, 5, 1, 7, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [9, 7, 0, 5, 4, 8, 1, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [1, 5, 2, 7, 0, 3, 9, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [5, 8, 0, 3, 9, 2, 6, 7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [1, 2, 4, 5, 9, 0, 7, 6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [2, 7, 0, 1, 6, 8, 3, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [2, 5, 0, 9, 4, 6, 8, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [6, 0, 1, 2, 3, 5, 7, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [5, 0, 6, 4, 9, 3, 8, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [9, 7, 6, 5, 2, 3, 0, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [0, 8, 7, 1, 4, 9, 3, 6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [9, 7, 6, 8, 3, 2, 1, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [3, 7, 8, 4, 6, 2, 1, 0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [6, 0, 1, 2, 4, 3, 8, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [8, 4, 7, 3, 9, 0, 6, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [2, 0, 6, 7, 9, 5, 1, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [7, 8, 0, 4, 2, 5, 3, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [9, 2, 8, 6, 5, 0, 4, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [0, 6, 2, 1, 4, 7, 8, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [8, 0, 7, 5, 1, 4, 6, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [6, 9, 4, 0, 1, 2, 7, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [1, 7, 9, 4, 0, 6, 2, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [5, 0, 8, 9, 6, 3, 7, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [5, 4, 8, 1, 0, 7, 6, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [1, 4, 3, 9, 7, 8, 0, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [6, 3, 9, 0, 1, 7, 8, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
2021-06-30 17:38:51.607670: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcuda.so.1
2021-06-30 17:38:51.619890: E tensorflow/stream_executor/cuda/cuda_driver.cc:313] failed call to cuInit: CUDA_ERROR_NO_DEVICE: no CUDA-capable device is detected
2021-06-30 17:38:51.619941: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:169] retrieving CUDA diagnostic information for host: dell-PowerEdge-R940xa
2021-06-30 17:38:51.619948: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:176] hostname: dell-PowerEdge-R940xa
2021-06-30 17:38:51.620194: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:200] libcuda reported version is: 440.44.0
2021-06-30 17:38:51.620216: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:204] kernel reported version is: 440.44.0
2021-06-30 17:38:51.620221: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:310] kernel version seems to match DSO: 440.44.0
2021-06-30 17:38:51.620436: I tensorflow/core/platform/cpu_feature_guard.cc:143] Your CPU supports instructions that this TensorFlow binary was not compiled to use: SSE4.1 SSE4.2 AVX AVX2 AVX512F FMA
2021-06-30 17:38:51.662154: I tensorflow/core/platform/profile_utils/cpu_utils.cc:102] CPU Frequency: 2600000000 Hz
2021-06-30 17:38:51.672895: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0x558b84df9290 initialized for platform Host (this does not guarantee that XLA will be used). Devices:
2021-06-30 17:38:51.672966: I tensorflow/compiler/xla/service/service.cc:176]   StreamExecutor device (0): Host, Default Version
Namespace(batch_size=1024, dataset='cifar10', each_div=111, idc_layer='all', idc_n=6, iterations=30, k_kmnc=10, k_nc=0.75, k_tknc=1, model='MobileNet', num_div=9, ood_dataset='SUN', path='/media/data1/DeepSuite/', pool_iter=1000, pool_type='test', sa_layer=-1, sa_n=1000, save_path='/media/data1/DeepSuite', wrong_rate=0.1)
load MobileNet...
/media/data1/DeepSuite/trained_models/cifar10/MobileNet.h5
Model: "model"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
input_2 (InputLayer)         [(None, None, None, 3)]   0         
_________________________________________________________________
conv1_pad (ZeroPadding2D)    (None, None, None, 3)     0         
_________________________________________________________________
conv1 (Conv2D)               (None, None, None, 32)    864       
_________________________________________________________________
conv1_bn (BatchNormalization (None, None, None, 32)    128       
_________________________________________________________________
conv1_relu (ReLU)            (None, None, None, 32)    0         
_________________________________________________________________
conv_dw_1 (DepthwiseConv2D)  (None, None, None, 32)    288       
_________________________________________________________________
conv_dw_1_bn (BatchNormaliza (None, None, None, 32)    128       
_________________________________________________________________
conv_dw_1_relu (ReLU)        (None, None, None, 32)    0         
_________________________________________________________________
conv_pw_1 (Conv2D)           (None, None, None, 64)    2048      
_________________________________________________________________
conv_pw_1_bn (BatchNormaliza (None, None, None, 64)    256       
_________________________________________________________________
conv_pw_1_relu (ReLU)        (None, None, None, 64)    0         
_________________________________________________________________
conv_pad_2 (ZeroPadding2D)   (None, None, None, 64)    0         
_________________________________________________________________
conv_dw_2 (DepthwiseConv2D)  (None, None, None, 64)    576       
_________________________________________________________________
conv_dw_2_bn (BatchNormaliza (None, None, None, 64)    256       
_________________________________________________________________
conv_dw_2_relu (ReLU)        (None, None, None, 64)    0         
_________________________________________________________________
conv_pw_2 (Conv2D)           (None, None, None, 128)   8192      
_________________________________________________________________
conv_pw_2_bn (BatchNormaliza (None, None, None, 128)   512       
_________________________________________________________________
conv_pw_2_relu (ReLU)        (None, None, None, 128)   0         
_________________________________________________________________
conv_dw_3 (DepthwiseConv2D)  (None, None, None, 128)   1152      
_________________________________________________________________
conv_dw_3_bn (BatchNormaliza (None, None, None, 128)   512       
_________________________________________________________________
conv_dw_3_relu (ReLU)        (None, None, None, 128)   0         
_________________________________________________________________
conv_pw_3 (Conv2D)           (None, None, None, 128)   16384     
_________________________________________________________________
conv_pw_3_bn (BatchNormaliza (None, None, None, 128)   512       
_________________________________________________________________
conv_pw_3_relu (ReLU)        (None, None, None, 128)   0         
_________________________________________________________________
conv_pad_4 (ZeroPadding2D)   (None, None, None, 128)   0         
_________________________________________________________________
conv_dw_4 (DepthwiseConv2D)  (None, None, None, 128)   1152      
_________________________________________________________________
conv_dw_4_bn (BatchNormaliza (None, None, None, 128)   512       
_________________________________________________________________
conv_dw_4_relu (ReLU)        (None, None, None, 128)   0         
_________________________________________________________________
conv_pw_4 (Conv2D)           (None, None, None, 256)   32768     
_________________________________________________________________
conv_pw_4_bn (BatchNormaliza (None, None, None, 256)   1024      
_________________________________________________________________
conv_pw_4_relu (ReLU)        (None, None, None, 256)   0         
_________________________________________________________________
conv_dw_5 (DepthwiseConv2D)  (None, None, None, 256)   2304      
_________________________________________________________________
conv_dw_5_bn (BatchNormaliza (None, None, None, 256)   1024      
_________________________________________________________________
conv_dw_5_relu (ReLU)        (None, None, None, 256)   0         
_________________________________________________________________
conv_pw_5 (Conv2D)           (None, None, None, 256)   65536     
_________________________________________________________________
conv_pw_5_bn (BatchNormaliza (None, None, None, 256)   1024      
_________________________________________________________________
conv_pw_5_relu (ReLU)        (None, None, None, 256)   0         
_________________________________________________________________
conv_pad_6 (ZeroPadding2D)   (None, None, None, 256)   0         
_________________________________________________________________
conv_dw_6 (DepthwiseConv2D)  (None, None, None, 256)   2304      
_________________________________________________________________
conv_dw_6_bn (BatchNormaliza (None, None, None, 256)   1024      
_________________________________________________________________
conv_dw_6_relu (ReLU)        (None, None, None, 256)   0         
_________________________________________________________________
conv_pw_6 (Conv2D)           (None, None, None, 512)   131072    
_________________________________________________________________
conv_pw_6_bn (BatchNormaliza (None, None, None, 512)   2048      
_________________________________________________________________
conv_pw_6_relu (ReLU)        (None, None, None, 512)   0         
_________________________________________________________________
conv_dw_7 (DepthwiseConv2D)  (None, None, None, 512)   4608      
_________________________________________________________________
conv_dw_7_bn (BatchNormaliza (None, None, None, 512)   2048      
_________________________________________________________________
conv_dw_7_relu (ReLU)        (None, None, None, 512)   0         
_________________________________________________________________
conv_pw_7 (Conv2D)           (None, None, None, 512)   262144    
_________________________________________________________________
conv_pw_7_bn (BatchNormaliza (None, None, None, 512)   2048      
_________________________________________________________________
conv_pw_7_relu (ReLU)        (None, None, None, 512)   0         
_________________________________________________________________
conv_dw_8 (DepthwiseConv2D)  (None, None, None, 512)   4608      
_________________________________________________________________
conv_dw_8_bn (BatchNormaliza (None, None, None, 512)   2048      
_________________________________________________________________
conv_dw_8_relu (ReLU)        (None, None, None, 512)   0         
_________________________________________________________________
conv_pw_8 (Conv2D)           (None, None, None, 512)   262144    
_________________________________________________________________
conv_pw_8_bn (BatchNormaliza (None, None, None, 512)   2048      
_________________________________________________________________
conv_pw_8_relu (ReLU)        (None, None, None, 512)   0         
_________________________________________________________________
conv_dw_9 (DepthwiseConv2D)  (None, None, None, 512)   4608      
_________________________________________________________________
conv_dw_9_bn (BatchNormaliza (None, None, None, 512)   2048      
_________________________________________________________________
conv_dw_9_relu (ReLU)        (None, None, None, 512)   0         
_________________________________________________________________
conv_pw_9 (Conv2D)           (None, None, None, 512)   262144    
_________________________________________________________________
conv_pw_9_bn (BatchNormaliza (None, None, None, 512)   2048      
_________________________________________________________________
conv_pw_9_relu (ReLU)        (None, None, None, 512)   0         
_________________________________________________________________
conv_dw_10 (DepthwiseConv2D) (None, None, None, 512)   4608      
_________________________________________________________________
conv_dw_10_bn (BatchNormaliz (None, None, None, 512)   2048      
_________________________________________________________________
conv_dw_10_relu (ReLU)       (None, None, None, 512)   0         
_________________________________________________________________
conv_pw_10 (Conv2D)          (None, None, None, 512)   262144    
_________________________________________________________________
conv_pw_10_bn (BatchNormaliz (None, None, None, 512)   2048      
_________________________________________________________________
conv_pw_10_relu (ReLU)       (None, None, None, 512)   0         
_________________________________________________________________
conv_dw_11 (DepthwiseConv2D) (None, None, None, 512)   4608      
_________________________________________________________________
conv_dw_11_bn (BatchNormaliz (None, None, None, 512)   2048      
_________________________________________________________________
conv_dw_11_relu (ReLU)       (None, None, None, 512)   0         
_________________________________________________________________
conv_pw_11 (Conv2D)          (None, None, None, 512)   262144    
_________________________________________________________________
conv_pw_11_bn (BatchNormaliz (None, None, None, 512)   2048      
_________________________________________________________________
conv_pw_11_relu (ReLU)       (None, None, None, 512)   0         
_________________________________________________________________
conv_pad_12 (ZeroPadding2D)  (None, None, None, 512)   0         
_________________________________________________________________
conv_dw_12 (DepthwiseConv2D) (None, None, None, 512)   4608      
_________________________________________________________________
conv_dw_12_bn (BatchNormaliz (None, None, None, 512)   2048      
_________________________________________________________________
conv_dw_12_relu (ReLU)       (None, None, None, 512)   0         
_________________________________________________________________
conv_pw_12 (Conv2D)          (None, None, None, 1024)  524288    
_________________________________________________________________
conv_pw_12_bn (BatchNormaliz (None, None, None, 1024)  4096      
_________________________________________________________________
conv_pw_12_relu (ReLU)       (None, None, None, 1024)  0         
_________________________________________________________________
conv_dw_13 (DepthwiseConv2D) (None, None, None, 1024)  9216      
_________________________________________________________________
conv_dw_13_bn (BatchNormaliz (None, None, None, 1024)  4096      
_________________________________________________________________
conv_dw_13_relu (ReLU)       (None, None, None, 1024)  0         
_________________________________________________________________
conv_pw_13 (Conv2D)          (None, None, None, 1024)  1048576   
_________________________________________________________________
conv_pw_13_bn (BatchNormaliz (None, None, None, 1024)  4096      
_________________________________________________________________
conv_pw_13_relu (ReLU)       (None, None, None, 1024)  0         
_________________________________________________________________
global_average_pooling2d (Gl (None, 1024)              0         
_________________________________________________________________
dense (Dense)                (None, 64)                65600     
_________________________________________________________________
dense_1 (Dense)              (None, 10)                650       
=================================================================
Total params: 3,295,114
Trainable params: 3,273,226
Non-trainable params: 21,888
_________________________________________________________________
None
<class 'numpy.ndarray'>
10000
key:  3  D[d]:  1000
key:  8  D[d]:  1000
key:  0  D[d]:  1000
key:  6  D[d]:  1000
key:  1  D[d]:  1000
key:  9  D[d]:  1000
key:  5  D[d]:  1000
key:  7  D[d]:  1000
key:  4  D[d]:  1000
key:  2  D[d]:  1000
div_idx:  [3, 1, 8, 5, 6, 0, 2, 9, 7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [9, 6, 0, 3, 7, 5, 1, 8, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [4, 5, 7, 3, 2, 9, 1, 6, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [5, 2, 9, 0, 1, 3, 7, 4, 6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [1, 7, 3, 9, 6, 5, 2, 4, 0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [8, 4, 2, 6, 5, 3, 9, 0, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [3, 2, 1, 5, 4, 9, 8, 6, 0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [2, 0, 3, 7, 4, 1, 5, 8, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [0, 8, 5, 6, 3, 1, 4, 7, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [1, 5, 8, 6, 7, 0, 4, 3, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [5, 7, 2, 1, 6, 0, 4, 8, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [3, 0, 2, 9, 5, 8, 7, 4, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [7, 2, 1, 4, 9, 6, 5, 0, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [5, 8, 7, 1, 6, 2, 3, 9, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [1, 5, 0, 3, 4, 9, 6, 7, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [5, 1, 4, 8, 0, 6, 7, 9, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [1, 4, 6, 7, 3, 2, 5, 8, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [3, 1, 7, 2, 8, 5, 6, 0, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [7, 5, 1, 2, 8, 4, 6, 9, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [1, 5, 4, 7, 9, 0, 3, 2, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [9, 0, 8, 5, 3, 4, 1, 7, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [5, 4, 1, 0, 3, 8, 2, 7, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [4, 2, 5, 6, 7, 1, 9, 3, 0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [4, 3, 6, 5, 1, 0, 2, 8, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [7, 9, 6, 5, 8, 0, 1, 3, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [0, 1, 8, 6, 7, 4, 5, 9, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [3, 2, 6, 7, 4, 1, 5, 9, 0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [3, 1, 4, 2, 6, 5, 8, 9, 7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [1, 0, 5, 8, 2, 3, 6, 9, 7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [5, 7, 9, 8, 6, 2, 4, 1, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
<class 'numpy.ndarray'>
10000
key:  3  D[d]:  1000
key:  8  D[d]:  1000
key:  0  D[d]:  1000
key:  6  D[d]:  1000
key:  1  D[d]:  1000
key:  9  D[d]:  1000
key:  5  D[d]:  1000
key:  7  D[d]:  1000
key:  4  D[d]:  1000
key:  2  D[d]:  1000
div_idx:  [1, 6, 4, 2, 3, 9, 7, 5, 0]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (999, 69786)
div_idx:  [2, 7, 0, 6, 9, 8, 4, 5, 1]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (999, 69786)
div_idx:  [5, 0, 6, 2, 1, 9, 4, 3, 8]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (999, 69786)
div_idx:  [7, 8, 2, 6, 1, 9, 4, 3, 0]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (999, 69786)
div_idx:  [8, 9, 2, 4, 1, 5, 3, 6, 0]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (999, 69786)
div_idx:  [7, 3, 5, 6, 8, 9, 0, 1, 2]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (999, 69786)
div_idx:  [5, 1, 0, 9, 8, 3, 4, 7, 2]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (999, 69786)
div_idx:  [1, 5, 8, 9, 0, 4, 7, 6, 3]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (999, 69786)
div_idx:  [4, 8, 2, 0, 3, 9, 6, 7, 5]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (999, 69786)
div_idx:  [5, 3, 7, 1, 2, 8, 4, 9, 0]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (999, 69786)
div_idx:  [0, 8, 9, 5, 1, 4, 3, 7, 2]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (999, 69786)
div_idx:  [7, 9, 6, 4, 8, 0, 5, 3, 2]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (999, 69786)
div_idx:  [3, 8, 7, 4, 9, 6, 1, 0, 2]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (999, 69786)
div_idx:  [8, 7, 9, 5, 1, 3, 2, 0, 4]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (999, 69786)
div_idx:  [4, 6, 3, 9, 2, 0, 8, 7, 1]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (999, 69786)
div_idx:  [4, 9, 6, 1, 2, 3, 7, 5, 0]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (999, 69786)
div_idx:  [2, 7, 6, 9, 0, 5, 8, 3, 4]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (999, 69786)
div_idx:  [6, 2, 8, 5, 3, 4, 7, 1, 0]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (999, 69786)
div_idx:  [3, 8, 2, 9, 7, 0, 5, 1, 4]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (999, 69786)
div_idx:  [7, 5, 0, 9, 4, 8, 2, 3, 6]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (999, 69786)
div_idx:  [1, 0, 8, 7, 5, 4, 6, 2, 3]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (999, 69786)
div_idx:  [4, 6, 8, 7, 2, 5, 0, 3, 9]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (999, 69786)
div_idx:  [0, 1, 5, 2, 4, 8, 6, 7, 9]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (999, 69786)
div_idx:  [9, 1, 8, 6, 0, 2, 4, 5, 7]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (999, 69786)
div_idx:  [4, 3, 8, 5, 2, 6, 9, 1, 7]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (999, 69786)
div_idx:  [9, 4, 6, 8, 5, 0, 1, 2, 7]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (999, 69786)
div_idx:  [6, 8, 9, 0, 4, 1, 5, 7, 3]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (999, 69786)
div_idx:  [3, 9, 5, 4, 1, 0, 8, 2, 7]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (999, 69786)
div_idx:  [0, 6, 8, 1, 4, 5, 2, 9, 7]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (999, 69786)
div_idx:  [3, 1, 4, 7, 8, 5, 2, 9, 6]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (999, 69786)
<class 'numpy.ndarray'>
10000
key:  3  D[d]:  1000
key:  8  D[d]:  1000
key:  0  D[d]:  1000
key:  6  D[d]:  1000
key:  1  D[d]:  1000
key:  9  D[d]:  1000
key:  5  D[d]:  1000
key:  7  D[d]:  1000
key:  4  D[d]:  1000
key:  2  D[d]:  1000
div_idx:  [5, 9, 2, 4, 6, 3, 1, 8, 0]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (999, 348930)
div_idx:  [0, 1, 5, 6, 3, 7, 4, 2, 8]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (999, 348930)
div_idx:  [5, 4, 9, 2, 7, 8, 3, 6, 0]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (999, 348930)
div_idx:  [9, 8, 2, 1, 0, 4, 3, 6, 7]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (999, 348930)
div_idx:  [7, 2, 6, 3, 5, 1, 8, 9, 0]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (999, 348930)
div_idx:  [6, 0, 1, 3, 8, 5, 7, 4, 9]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (999, 348930)
div_idx:  [7, 5, 6, 4, 3, 9, 2, 0, 1]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (999, 348930)
div_idx:  [0, 1, 5, 2, 7, 4, 9, 8, 6]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (999, 348930)
div_idx:  [3, 0, 7, 9, 8, 5, 6, 1, 4]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (999, 348930)
div_idx:  [2, 7, 5, 4, 6, 8, 1, 9, 3]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (999, 348930)
div_idx:  [6, 1, 8, 5, 2, 9, 7, 4, 0]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (999, 348930)
div_idx:  [5, 4, 6, 2, 0, 9, 1, 8, 3]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (999, 348930)
div_idx:  [9, 7, 1, 2, 0, 8, 3, 6, 5]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (999, 348930)
div_idx:  [9, 4, 3, 8, 7, 6, 1, 0, 5]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (999, 348930)
div_idx:  [2, 0, 3, 5, 4, 9, 6, 8, 1]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (999, 348930)
div_idx:  [0, 3, 6, 8, 9, 7, 1, 5, 2]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (999, 348930)
div_idx:  [4, 5, 1, 8, 7, 0, 6, 3, 2]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (999, 348930)
div_idx:  [0, 1, 6, 3, 8, 5, 2, 4, 7]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (999, 348930)
div_idx:  [3, 2, 8, 4, 0, 7, 6, 9, 5]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (999, 348930)
div_idx:  [3, 9, 8, 6, 1, 2, 4, 5, 0]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (999, 348930)
div_idx:  [9, 2, 1, 4, 0, 8, 7, 6, 3]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (999, 348930)
div_idx:  [6, 1, 5, 3, 2, 4, 9, 7, 0]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (999, 348930)
div_idx:  [8, 1, 4, 3, 2, 9, 0, 6, 5]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (999, 348930)
div_idx:  [4, 2, 9, 3, 5, 7, 8, 1, 0]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (999, 348930)
div_idx:  [3, 2, 1, 9, 4, 6, 8, 7, 0]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (999, 348930)
div_idx:  [9, 1, 8, 7, 5, 0, 6, 2, 4]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (999, 348930)
div_idx:  [1, 7, 5, 9, 6, 3, 0, 8, 4]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (999, 348930)
div_idx:  [5, 9, 7, 2, 4, 8, 0, 6, 3]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (999, 348930)
div_idx:  [5, 9, 2, 1, 6, 8, 3, 4, 7]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (999, 348930)
div_idx:  [6, 3, 9, 5, 7, 1, 8, 4, 2]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (999, 348930)
<class 'numpy.ndarray'>
10000
key:  3  D[d]:  1000
key:  8  D[d]:  1000
key:  0  D[d]:  1000
key:  6  D[d]:  1000
key:  1  D[d]:  1000
key:  9  D[d]:  1000
key:  5  D[d]:  1000
key:  7  D[d]:  1000
key:  4  D[d]:  1000
key:  2  D[d]:  1000
div_idx:  [1, 0, 5, 9, 8, 3, 2, 6, 7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [0, 8, 1, 7, 9, 6, 4, 3, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [3, 1, 7, 0, 5, 8, 9, 2, 6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [4, 1, 6, 7, 3, 5, 0, 8, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [0, 6, 5, 3, 7, 8, 9, 1, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [2, 9, 7, 1, 8, 0, 4, 6, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness: /home/zhiyu/DeepSuite/adversarial/adv_function/trace.py:107: RuntimeWarning: invalid value encountered in true_divide
  neuron_value = (neuron_value - traces_low[i]) / unit[i]
 (999, 34893)
div_idx:  [4, 8, 5, 9, 1, 3, 7, 2, 6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [4, 2, 0, 3, 9, 5, 8, 6, 7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [6, 9, 8, 3, 5, 2, 7, 1, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [9, 4, 2, 1, 3, 6, 5, 0, 7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [2, 9, 4, 1, 8, 0, 6, 3, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [8, 7, 9, 5, 0, 2, 4, 3, 6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [7, 0, 9, 8, 3, 1, 6, 4, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [1, 6, 2, 5, 0, 9, 8, 3, 7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [7, 3, 4, 2, 5, 8, 9, 1, 6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [7, 8, 2, 5, 0, 6, 4, 1, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [3, 2, 7, 9, 1, 0, 6, 5, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [4, 8, 3, 9, 1, 6, 5, 2, 0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [6, 8, 3, 7, 0, 4, 9, 1, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [8, 3, 9, 7, 1, 0, 5, 4, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [8, 7, 3, 2, 0, 9, 4, 5, 6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [9, 5, 7, 6, 1, 8, 3, 4, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [0, 2, 9, 1, 7, 6, 3, 4, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [3, 4, 2, 0, 9, 5, 6, 1, 7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [7, 2, 8, 6, 1, 3, 9, 0, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [3, 0, 6, 7, 1, 9, 5, 8, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [9, 2, 5, 8, 4, 3, 6, 0, 7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [6, 2, 5, 0, 8, 3, 9, 4, 7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [1, 6, 9, 5, 2, 7, 4, 8, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [7, 0, 2, 4, 8, 3, 9, 1, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
<class 'numpy.ndarray'>
10000
key:  3  D[d]:  1000
key:  8  D[d]:  1000
key:  0  D[d]:  1000
key:  6  D[d]:  1000
key:  1  D[d]:  1000
key:  9  D[d]:  1000
key:  5  D[d]:  1000
key:  7  D[d]:  1000
key:  4  D[d]:  1000
key:  2  D[d]:  1000
div_idx:  [3, 7, 5, 0, 1, 2, 8, 9, 6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [3, 1, 6, 0, 9, 2, 7, 4, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [7, 6, 2, 0, 4, 3, 9, 5, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [9, 6, 8, 7, 2, 0, 5, 1, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [0, 1, 8, 6, 4, 7, 5, 3, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [0, 4, 2, 5, 9, 8, 3, 6, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [9, 3, 7, 1, 8, 0, 2, 4, 6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [7, 5, 1, 9, 4, 3, 6, 0, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [5, 1, 6, 7, 0, 4, 2, 3, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [4, 1, 5, 0, 9, 6, 2, 3, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [2, 1, 0, 3, 7, 8, 6, 4, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [5, 6, 0, 9, 4, 8, 7, 1, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [6, 4, 9, 5, 2, 1, 3, 0, 7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [8, 2, 6, 4, 7, 5, 9, 3, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [3, 2, 7, 9, 6, 1, 8, 0, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [5, 6, 2, 1, 0, 7, 3, 9, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [3, 0, 2, 4, 9, 8, 7, 6, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [3, 5, 0, 7, 9, 1, 6, 8, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [6, 7, 4, 3, 2, 0, 5, 8, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [0, 7, 3, 5, 2, 4, 6, 1, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [0, 1, 8, 3, 9, 7, 4, 2, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [5, 9, 1, 6, 3, 7, 0, 4, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [4, 0, 6, 5, 3, 7, 9, 1, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [5, 6, 0, 9, 1, 2, 3, 4, 7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [7, 9, 8, 0, 1, 6, 4, 2, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [0, 5, 6, 7, 2, 3, 8, 1, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [8, 7, 2, 0, 4, 3, 9, 6, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [0, 3, 2, 6, 5, 4, 1, 9, 7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [0, 7, 4, 3, 8, 5, 2, 1, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
div_idx:  [1, 4, 3, 9, 7, 8, 0, 5, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (999, 34893)
2021-06-30 17:42:39.722194: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcuda.so.1
2021-06-30 17:42:39.734520: E tensorflow/stream_executor/cuda/cuda_driver.cc:313] failed call to cuInit: CUDA_ERROR_NO_DEVICE: no CUDA-capable device is detected
2021-06-30 17:42:39.734575: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:169] retrieving CUDA diagnostic information for host: dell-PowerEdge-R940xa
2021-06-30 17:42:39.734582: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:176] hostname: dell-PowerEdge-R940xa
2021-06-30 17:42:39.734726: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:200] libcuda reported version is: 440.44.0
2021-06-30 17:42:39.734749: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:204] kernel reported version is: 440.44.0
2021-06-30 17:42:39.734754: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:310] kernel version seems to match DSO: 440.44.0
2021-06-30 17:42:39.735155: I tensorflow/core/platform/cpu_feature_guard.cc:143] Your CPU supports instructions that this TensorFlow binary was not compiled to use: SSE4.1 SSE4.2 AVX AVX2 AVX512F FMA
2021-06-30 17:42:39.774126: I tensorflow/core/platform/profile_utils/cpu_utils.cc:102] CPU Frequency: 2600000000 Hz
2021-06-30 17:42:39.784187: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0x564406082a70 initialized for platform Host (this does not guarantee that XLA will be used). Devices:
2021-06-30 17:42:39.784254: I tensorflow/compiler/xla/service/service.cc:176]   StreamExecutor device (0): Host, Default Version
Namespace(batch_size=1024, dataset='cifar10', each_div=100, idc_layer='all', idc_n=6, iterations=30, k_kmnc=10, k_nc=0.75, k_tknc=1, model='MobileNet', num_div=10, ood_dataset='SUN', path='/media/data1/DeepSuite/', pool_iter=1000, pool_type='test', sa_layer=-1, sa_n=1000, save_path='/media/data1/DeepSuite', wrong_rate=0.1)
load MobileNet...
/media/data1/DeepSuite/trained_models/cifar10/MobileNet.h5
Model: "model"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
input_2 (InputLayer)         [(None, None, None, 3)]   0         
_________________________________________________________________
conv1_pad (ZeroPadding2D)    (None, None, None, 3)     0         
_________________________________________________________________
conv1 (Conv2D)               (None, None, None, 32)    864       
_________________________________________________________________
conv1_bn (BatchNormalization (None, None, None, 32)    128       
_________________________________________________________________
conv1_relu (ReLU)            (None, None, None, 32)    0         
_________________________________________________________________
conv_dw_1 (DepthwiseConv2D)  (None, None, None, 32)    288       
_________________________________________________________________
conv_dw_1_bn (BatchNormaliza (None, None, None, 32)    128       
_________________________________________________________________
conv_dw_1_relu (ReLU)        (None, None, None, 32)    0         
_________________________________________________________________
conv_pw_1 (Conv2D)           (None, None, None, 64)    2048      
_________________________________________________________________
conv_pw_1_bn (BatchNormaliza (None, None, None, 64)    256       
_________________________________________________________________
conv_pw_1_relu (ReLU)        (None, None, None, 64)    0         
_________________________________________________________________
conv_pad_2 (ZeroPadding2D)   (None, None, None, 64)    0         
_________________________________________________________________
conv_dw_2 (DepthwiseConv2D)  (None, None, None, 64)    576       
_________________________________________________________________
conv_dw_2_bn (BatchNormaliza (None, None, None, 64)    256       
_________________________________________________________________
conv_dw_2_relu (ReLU)        (None, None, None, 64)    0         
_________________________________________________________________
conv_pw_2 (Conv2D)           (None, None, None, 128)   8192      
_________________________________________________________________
conv_pw_2_bn (BatchNormaliza (None, None, None, 128)   512       
_________________________________________________________________
conv_pw_2_relu (ReLU)        (None, None, None, 128)   0         
_________________________________________________________________
conv_dw_3 (DepthwiseConv2D)  (None, None, None, 128)   1152      
_________________________________________________________________
conv_dw_3_bn (BatchNormaliza (None, None, None, 128)   512       
_________________________________________________________________
conv_dw_3_relu (ReLU)        (None, None, None, 128)   0         
_________________________________________________________________
conv_pw_3 (Conv2D)           (None, None, None, 128)   16384     
_________________________________________________________________
conv_pw_3_bn (BatchNormaliza (None, None, None, 128)   512       
_________________________________________________________________
conv_pw_3_relu (ReLU)        (None, None, None, 128)   0         
_________________________________________________________________
conv_pad_4 (ZeroPadding2D)   (None, None, None, 128)   0         
_________________________________________________________________
conv_dw_4 (DepthwiseConv2D)  (None, None, None, 128)   1152      
_________________________________________________________________
conv_dw_4_bn (BatchNormaliza (None, None, None, 128)   512       
_________________________________________________________________
conv_dw_4_relu (ReLU)        (None, None, None, 128)   0         
_________________________________________________________________
conv_pw_4 (Conv2D)           (None, None, None, 256)   32768     
_________________________________________________________________
conv_pw_4_bn (BatchNormaliza (None, None, None, 256)   1024      
_________________________________________________________________
conv_pw_4_relu (ReLU)        (None, None, None, 256)   0         
_________________________________________________________________
conv_dw_5 (DepthwiseConv2D)  (None, None, None, 256)   2304      
_________________________________________________________________
conv_dw_5_bn (BatchNormaliza (None, None, None, 256)   1024      
_________________________________________________________________
conv_dw_5_relu (ReLU)        (None, None, None, 256)   0         
_________________________________________________________________
conv_pw_5 (Conv2D)           (None, None, None, 256)   65536     
_________________________________________________________________
conv_pw_5_bn (BatchNormaliza (None, None, None, 256)   1024      
_________________________________________________________________
conv_pw_5_relu (ReLU)        (None, None, None, 256)   0         
_________________________________________________________________
conv_pad_6 (ZeroPadding2D)   (None, None, None, 256)   0         
_________________________________________________________________
conv_dw_6 (DepthwiseConv2D)  (None, None, None, 256)   2304      
_________________________________________________________________
conv_dw_6_bn (BatchNormaliza (None, None, None, 256)   1024      
_________________________________________________________________
conv_dw_6_relu (ReLU)        (None, None, None, 256)   0         
_________________________________________________________________
conv_pw_6 (Conv2D)           (None, None, None, 512)   131072    
_________________________________________________________________
conv_pw_6_bn (BatchNormaliza (None, None, None, 512)   2048      
_________________________________________________________________
conv_pw_6_relu (ReLU)        (None, None, None, 512)   0         
_________________________________________________________________
conv_dw_7 (DepthwiseConv2D)  (None, None, None, 512)   4608      
_________________________________________________________________
conv_dw_7_bn (BatchNormaliza (None, None, None, 512)   2048      
_________________________________________________________________
conv_dw_7_relu (ReLU)        (None, None, None, 512)   0         
_________________________________________________________________
conv_pw_7 (Conv2D)           (None, None, None, 512)   262144    
_________________________________________________________________
conv_pw_7_bn (BatchNormaliza (None, None, None, 512)   2048      
_________________________________________________________________
conv_pw_7_relu (ReLU)        (None, None, None, 512)   0         
_________________________________________________________________
conv_dw_8 (DepthwiseConv2D)  (None, None, None, 512)   4608      
_________________________________________________________________
conv_dw_8_bn (BatchNormaliza (None, None, None, 512)   2048      
_________________________________________________________________
conv_dw_8_relu (ReLU)        (None, None, None, 512)   0         
_________________________________________________________________
conv_pw_8 (Conv2D)           (None, None, None, 512)   262144    
_________________________________________________________________
conv_pw_8_bn (BatchNormaliza (None, None, None, 512)   2048      
_________________________________________________________________
conv_pw_8_relu (ReLU)        (None, None, None, 512)   0         
_________________________________________________________________
conv_dw_9 (DepthwiseConv2D)  (None, None, None, 512)   4608      
_________________________________________________________________
conv_dw_9_bn (BatchNormaliza (None, None, None, 512)   2048      
_________________________________________________________________
conv_dw_9_relu (ReLU)        (None, None, None, 512)   0         
_________________________________________________________________
conv_pw_9 (Conv2D)           (None, None, None, 512)   262144    
_________________________________________________________________
conv_pw_9_bn (BatchNormaliza (None, None, None, 512)   2048      
_________________________________________________________________
conv_pw_9_relu (ReLU)        (None, None, None, 512)   0         
_________________________________________________________________
conv_dw_10 (DepthwiseConv2D) (None, None, None, 512)   4608      
_________________________________________________________________
conv_dw_10_bn (BatchNormaliz (None, None, None, 512)   2048      
_________________________________________________________________
conv_dw_10_relu (ReLU)       (None, None, None, 512)   0         
_________________________________________________________________
conv_pw_10 (Conv2D)          (None, None, None, 512)   262144    
_________________________________________________________________
conv_pw_10_bn (BatchNormaliz (None, None, None, 512)   2048      
_________________________________________________________________
conv_pw_10_relu (ReLU)       (None, None, None, 512)   0         
_________________________________________________________________
conv_dw_11 (DepthwiseConv2D) (None, None, None, 512)   4608      
_________________________________________________________________
conv_dw_11_bn (BatchNormaliz (None, None, None, 512)   2048      
_________________________________________________________________
conv_dw_11_relu (ReLU)       (None, None, None, 512)   0         
_________________________________________________________________
conv_pw_11 (Conv2D)          (None, None, None, 512)   262144    
_________________________________________________________________
conv_pw_11_bn (BatchNormaliz (None, None, None, 512)   2048      
_________________________________________________________________
conv_pw_11_relu (ReLU)       (None, None, None, 512)   0         
_________________________________________________________________
conv_pad_12 (ZeroPadding2D)  (None, None, None, 512)   0         
_________________________________________________________________
conv_dw_12 (DepthwiseConv2D) (None, None, None, 512)   4608      
_________________________________________________________________
conv_dw_12_bn (BatchNormaliz (None, None, None, 512)   2048      
_________________________________________________________________
conv_dw_12_relu (ReLU)       (None, None, None, 512)   0         
_________________________________________________________________
conv_pw_12 (Conv2D)          (None, None, None, 1024)  524288    
_________________________________________________________________
conv_pw_12_bn (BatchNormaliz (None, None, None, 1024)  4096      
_________________________________________________________________
conv_pw_12_relu (ReLU)       (None, None, None, 1024)  0         
_________________________________________________________________
conv_dw_13 (DepthwiseConv2D) (None, None, None, 1024)  9216      
_________________________________________________________________
conv_dw_13_bn (BatchNormaliz (None, None, None, 1024)  4096      
_________________________________________________________________
conv_dw_13_relu (ReLU)       (None, None, None, 1024)  0         
_________________________________________________________________
conv_pw_13 (Conv2D)          (None, None, None, 1024)  1048576   
_________________________________________________________________
conv_pw_13_bn (BatchNormaliz (None, None, None, 1024)  4096      
_________________________________________________________________
conv_pw_13_relu (ReLU)       (None, None, None, 1024)  0         
_________________________________________________________________
global_average_pooling2d (Gl (None, 1024)              0         
_________________________________________________________________
dense (Dense)                (None, 64)                65600     
_________________________________________________________________
dense_1 (Dense)              (None, 10)                650       
=================================================================
Total params: 3,295,114
Trainable params: 3,273,226
Non-trainable params: 21,888
_________________________________________________________________
None
<class 'numpy.ndarray'>
10000
key:  3  D[d]:  1000
key:  8  D[d]:  1000
key:  0  D[d]:  1000
key:  6  D[d]:  1000
key:  1  D[d]:  1000
key:  9  D[d]:  1000
key:  5  D[d]:  1000
key:  7  D[d]:  1000
key:  4  D[d]:  1000
key:  2  D[d]:  1000
div_idx:  [3, 1, 8, 5, 6, 0, 2, 9, 7, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [1, 4, 9, 8, 5, 3, 0, 2, 6, 7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [3, 8, 4, 6, 5, 7, 2, 0, 9, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [5, 2, 9, 0, 1, 3, 7, 4, 6, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [7, 2, 4, 8, 3, 5, 6, 9, 0, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [4, 8, 7, 6, 3, 5, 9, 1, 2, 0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [3, 1, 8, 5, 2, 7, 6, 0, 4, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [3, 1, 7, 4, 8, 2, 5, 9, 6, 0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [9, 2, 0, 3, 6, 4, 5, 7, 1, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [8, 6, 9, 0, 2, 1, 5, 7, 3, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [3, 8, 1, 5, 4, 7, 0, 6, 9, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [7, 3, 4, 8, 9, 1, 0, 6, 2, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [6, 0, 8, 3, 2, 4, 5, 7, 1, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [6, 4, 7, 0, 9, 3, 5, 8, 2, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [7, 9, 6, 3, 2, 4, 5, 0, 1, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [9, 4, 5, 3, 6, 1, 0, 7, 8, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [5, 3, 9, 4, 8, 2, 7, 6, 0, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [9, 6, 2, 3, 1, 0, 5, 7, 4, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [2, 3, 1, 0, 4, 6, 5, 7, 9, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [2, 4, 9, 0, 7, 1, 8, 6, 3, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [8, 4, 2, 6, 1, 9, 5, 7, 3, 0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [8, 6, 9, 1, 5, 0, 3, 2, 7, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [4, 7, 0, 6, 2, 8, 3, 1, 9, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [5, 2, 7, 3, 6, 0, 9, 8, 1, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [9, 0, 6, 5, 4, 7, 1, 8, 3, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [6, 1, 8, 5, 2, 0, 4, 7, 9, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [3, 9, 4, 6, 0, 5, 8, 1, 7, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [0, 5, 6, 4, 9, 8, 7, 1, 3, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [6, 7, 8, 2, 3, 5, 4, 0, 9, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [4, 9, 2, 6, 5, 3, 1, 0, 8, 7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
<class 'numpy.ndarray'>
10000
key:  3  D[d]:  1000
key:  8  D[d]:  1000
key:  0  D[d]:  1000
key:  6  D[d]:  1000
key:  1  D[d]:  1000
key:  9  D[d]:  1000
key:  5  D[d]:  1000
key:  7  D[d]:  1000
key:  4  D[d]:  1000
key:  2  D[d]:  1000
div_idx:  [4, 7, 3, 9, 8, 0, 1, 5, 2, 6]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [2, 0, 3, 8, 7, 4, 5, 6, 1, 9]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [9, 0, 7, 3, 4, 8, 1, 6, 5, 2]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [9, 2, 7, 3, 6, 1, 0, 4, 8, 5]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [3, 1, 9, 4, 7, 0, 6, 5, 2, 8]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [1, 3, 9, 2, 4, 5, 0, 6, 8, 7]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [9, 0, 2, 6, 7, 1, 3, 5, 4, 8]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [3, 1, 9, 5, 0, 4, 7, 6, 2, 8]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [6, 5, 9, 3, 8, 2, 0, 7, 1, 4]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [6, 3, 8, 2, 9, 0, 7, 4, 1, 5]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [2, 0, 1, 3, 6, 8, 5, 9, 7, 4]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [5, 2, 6, 4, 8, 0, 9, 1, 3, 7]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [4, 9, 1, 3, 7, 2, 0, 8, 5, 6]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [2, 9, 7, 8, 5, 0, 4, 1, 3, 6]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [9, 3, 7, 8, 0, 5, 4, 2, 6, 1]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [7, 5, 2, 0, 3, 6, 1, 4, 8, 9]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [6, 9, 3, 2, 1, 4, 5, 7, 8, 0]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [3, 5, 2, 9, 1, 0, 4, 6, 7, 8]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [2, 5, 6, 1, 9, 4, 7, 3, 8, 0]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [8, 3, 6, 5, 4, 2, 7, 1, 0, 9]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [2, 9, 3, 8, 6, 4, 7, 1, 5, 0]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [8, 7, 0, 3, 2, 4, 5, 6, 1, 9]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [6, 1, 5, 0, 3, 9, 4, 8, 7, 2]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [5, 9, 3, 7, 2, 1, 6, 0, 4, 8]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [1, 4, 2, 8, 9, 3, 7, 0, 6, 5]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [0, 1, 4, 8, 5, 7, 6, 2, 3, 9]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [0, 5, 3, 9, 4, 2, 8, 6, 1, 7]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [9, 8, 5, 4, 1, 3, 7, 6, 2, 0]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [2, 6, 5, 0, 9, 7, 8, 4, 1, 3]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
div_idx:  [8, 5, 3, 0, 9, 6, 2, 1, 4, 7]
test_fitness.shape:  (10000, 69786)
size of selected fitness:  (1000, 69786)
<class 'numpy.ndarray'>
10000
key:  3  D[d]:  1000
key:  8  D[d]:  1000
key:  0  D[d]:  1000
key:  6  D[d]:  1000
key:  1  D[d]:  1000
key:  9  D[d]:  1000
key:  5  D[d]:  1000
key:  7  D[d]:  1000
key:  4  D[d]:  1000
key:  2  D[d]:  1000
div_idx:  [6, 2, 7, 1, 5, 0, 9, 3, 8, 4]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [1, 0, 6, 3, 2, 5, 9, 7, 4, 8]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [8, 7, 6, 0, 4, 1, 9, 5, 3, 2]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [8, 9, 7, 3, 2, 5, 0, 6, 1, 4]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [6, 3, 4, 9, 5, 2, 0, 1, 7, 8]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [5, 6, 0, 9, 2, 3, 1, 4, 8, 7]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [4, 7, 0, 3, 2, 5, 6, 9, 1, 8]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [6, 5, 0, 8, 4, 2, 9, 7, 3, 1]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [7, 6, 9, 5, 3, 2, 4, 1, 0, 8]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [4, 6, 0, 5, 9, 7, 2, 1, 3, 8]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [5, 7, 6, 3, 0, 9, 2, 4, 8, 1]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [1, 9, 4, 5, 3, 0, 7, 8, 6, 2]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [8, 6, 7, 3, 9, 4, 0, 2, 1, 5]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [9, 1, 4, 3, 2, 8, 6, 7, 0, 5]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [8, 1, 6, 0, 7, 9, 4, 5, 2, 3]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [6, 5, 1, 9, 0, 3, 7, 4, 8, 2]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [1, 0, 5, 4, 2, 9, 8, 3, 7, 6]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [5, 4, 8, 6, 1, 0, 2, 9, 3, 7]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [5, 6, 2, 9, 4, 7, 1, 0, 3, 8]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [0, 6, 4, 8, 2, 3, 1, 5, 9, 7]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [2, 9, 3, 5, 1, 7, 0, 4, 8, 6]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [3, 0, 4, 5, 9, 8, 1, 2, 7, 6]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [1, 6, 4, 0, 5, 8, 9, 3, 2, 7]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [7, 3, 5, 1, 8, 9, 2, 6, 4, 0]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [6, 8, 9, 2, 4, 5, 1, 7, 3, 0]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [9, 3, 5, 8, 2, 0, 1, 6, 7, 4]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [6, 9, 2, 5, 0, 8, 4, 3, 7, 1]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [3, 0, 7, 8, 5, 6, 9, 1, 4, 2]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [7, 1, 3, 8, 5, 4, 9, 6, 0, 2]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
div_idx:  [7, 9, 8, 2, 1, 3, 0, 4, 6, 5]
test_fitness.shape:  (10000, 348930)
size of selected fitness:  (1000, 348930)
<class 'numpy.ndarray'>
10000
key:  3  D[d]:  1000
key:  8  D[d]:  1000
key:  0  D[d]:  1000
key:  6  D[d]:  1000
key:  1  D[d]:  1000
key:  9  D[d]:  1000
key:  5  D[d]:  1000
key:  7  D[d]:  1000
key:  4  D[d]:  1000
key:  2  D[d]:  1000
div_idx:  [1, 7, 6, 8, 9, 4, 5, 3, 2, 0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [9, 1, 4, 6, 8, 2, 7, 5, 3, 0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [1, 8, 4, 2, 3, 6, 7, 0, 9, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness: /home/zhiyu/DeepSuite/adversarial/adv_function/trace.py:107: RuntimeWarning: invalid value encountered in true_divide
  neuron_value = (neuron_value - traces_low[i]) / unit[i]
 (1000, 34893)
div_idx:  [7, 6, 1, 9, 4, 8, 5, 3, 0, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [8, 3, 5, 0, 4, 9, 6, 1, 2, 7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [4, 5, 1, 6, 2, 0, 3, 7, 9, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [5, 8, 0, 2, 1, 4, 6, 3, 7, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [7, 0, 9, 1, 3, 8, 2, 5, 6, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [0, 6, 5, 4, 3, 7, 2, 1, 8, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [2, 5, 9, 6, 8, 3, 4, 1, 0, 7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [7, 5, 3, 4, 9, 2, 0, 8, 1, 6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [6, 7, 4, 0, 8, 5, 9, 3, 2, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [7, 6, 4, 2, 0, 5, 1, 9, 8, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [9, 4, 5, 6, 8, 1, 7, 3, 2, 0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [3, 1, 2, 9, 8, 5, 7, 6, 4, 0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [1, 0, 7, 5, 8, 4, 2, 9, 3, 6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [2, 9, 7, 3, 1, 6, 4, 5, 0, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [8, 5, 0, 9, 1, 6, 7, 2, 4, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [7, 5, 9, 3, 8, 2, 4, 6, 1, 0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [1, 9, 8, 2, 6, 7, 3, 0, 5, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [9, 8, 3, 2, 4, 7, 6, 0, 1, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [4, 2, 9, 0, 8, 1, 6, 3, 5, 7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [8, 5, 7, 0, 6, 2, 1, 3, 9, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [4, 3, 5, 2, 6, 0, 7, 1, 8, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [2, 7, 9, 0, 4, 3, 6, 1, 8, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [7, 5, 4, 6, 3, 1, 0, 2, 8, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [3, 7, 5, 2, 0, 4, 8, 9, 6, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [4, 9, 1, 3, 8, 2, 7, 6, 0, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [4, 2, 8, 9, 1, 6, 3, 0, 7, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [6, 7, 5, 0, 8, 3, 9, 1, 4, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
<class 'numpy.ndarray'>
10000
key:  3  D[d]:  1000
key:  8  D[d]:  1000
key:  0  D[d]:  1000
key:  6  D[d]:  1000
key:  1  D[d]:  1000
key:  9  D[d]:  1000
key:  5  D[d]:  1000
key:  7  D[d]:  1000
key:  4  D[d]:  1000
key:  2  D[d]:  1000
div_idx:  [3, 5, 7, 1, 0, 9, 2, 6, 8, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [3, 0, 6, 5, 8, 4, 1, 7, 9, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [9, 5, 2, 7, 3, 4, 0, 8, 1, 6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [2, 8, 5, 0, 4, 9, 7, 1, 6, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [5, 7, 2, 3, 4, 1, 8, 6, 0, 9]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [5, 6, 0, 1, 8, 3, 9, 2, 4, 7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [7, 8, 5, 0, 9, 3, 6, 4, 2, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [6, 4, 7, 5, 3, 0, 1, 2, 9, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [5, 4, 2, 7, 9, 3, 8, 6, 1, 0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [3, 2, 1, 7, 5, 6, 4, 8, 9, 0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [5, 6, 2, 0, 9, 1, 8, 3, 4, 7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [0, 4, 3, 9, 8, 2, 6, 7, 5, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [3, 6, 9, 2, 8, 0, 4, 1, 5, 7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [9, 5, 4, 6, 2, 3, 7, 8, 1, 0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [4, 7, 1, 9, 8, 2, 5, 0, 6, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [1, 3, 4, 2, 0, 9, 5, 6, 7, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [5, 3, 0, 2, 6, 1, 9, 4, 8, 7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [2, 0, 5, 8, 3, 6, 9, 1, 7, 4]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [2, 1, 7, 3, 4, 6, 5, 9, 0, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [6, 9, 2, 3, 8, 5, 1, 4, 0, 7]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [0, 1, 4, 8, 3, 7, 9, 2, 6, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [9, 2, 4, 8, 5, 6, 0, 7, 1, 3]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [4, 5, 1, 9, 3, 6, 7, 8, 0, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [7, 3, 4, 8, 9, 2, 0, 6, 1, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [3, 2, 9, 6, 1, 0, 4, 7, 5, 8]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [2, 0, 4, 8, 3, 7, 6, 9, 1, 5]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [4, 1, 8, 2, 7, 6, 5, 9, 3, 0]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [7, 3, 6, 1, 4, 8, 5, 9, 0, 2]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [8, 5, 3, 1, 4, 2, 7, 0, 9, 6]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
div_idx:  [9, 5, 4, 7, 6, 0, 3, 8, 2, 1]
test_fitness.shape:  (10000, 34893)
size of selected fitness:  (1000, 34893)
